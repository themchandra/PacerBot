
pacerbot-f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007484  08007484  00008484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007588  08007588  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007588  08007588  00008588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007590  08007590  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007590  08007590  00008590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007594  08007594  00008594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007598  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b60  2000006c  08007604  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  08007604  00009bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea6  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe6  00000000  00000000  0001df42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00020f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de0  00000000  00000000  00022110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004da0  00000000  00000000  00022ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014889  00000000  00000000  00027c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095966  00000000  00000000  0003c519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000d1ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000d7258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800746c 	.word	0x0800746c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800746c 	.word	0x0800746c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fbfe 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f828 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8e8 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8bc 	bl	8000738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c0:	f000 f88c 	bl	80006dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL); // make printf unbuffered
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <main+0x48>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f005 feb3 	bl	8006338 <setbuf>
  printf("\r\nUART printf ready\r\n");
 80005d2:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <main+0x4c>)
 80005d4:	f006 f900 	bl	80067d8 <puts>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d8:	f003 f92e 	bl	8003838 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005dc:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <main+0x50>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <main+0x54>)
 80005e2:	f003 f973 	bl	80038cc <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <main+0x58>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f003 f948 	bl	8003880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1);
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x44>
 80005f4:	2000001c 	.word	0x2000001c
 80005f8:	08007490 	.word	0x08007490
 80005fc:	08007518 	.word	0x08007518
 8000600:	08000935 	.word	0x08000935
 8000604:	20000124 	.word	0x20000124

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 f8e6 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fffa 	bl	8002688 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f993 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fa5c 	bl	8002b78 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f97d 	bl	80009c4 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x50>)
 800071a:	f000 fe63 	bl	80013e4 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f94e 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000088 	.word	0x20000088
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f002 fc22 	bl	8002fb8 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f923 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000dc 	.word	0x200000dc
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000818:	f000 fdca 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_GPIO_Init+0xd8>)
 8000834:	f000 fc38 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000850:	f000 fc2a 	bl	80010a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <testMPU6050>:
/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
static const uint8_t MPU_ADDR = 0x68; // 0x69 if AD0=1

void testMPU6050(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef st;
    uint8_t val;

    // (a) Optional full device reset
    val = 0x80; // DEVICE_RESET
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	71bb      	strb	r3, [r7, #6]
    st = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR<<1, 0x6B, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 8000872:	2368      	movs	r3, #104	@ 0x68
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	b299      	uxth	r1, r3
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	226b      	movs	r2, #107	@ 0x6b
 8000888:	4827      	ldr	r0, [pc, #156]	@ (8000928 <testMPU6050+0xc0>)
 800088a:	f000 feef 	bl	800166c <HAL_I2C_Mem_Write>
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	@ 0x64
 8000894:	f000 fafe 	bl	8000e94 <HAL_Delay>

    // (b) Wake + select PLL X-gyro clock (CLKSEL=1, SLEEP=0) => 0x01
    val = 0x01;
 8000898:	2301      	movs	r3, #1
 800089a:	71bb      	strb	r3, [r7, #6]
    st = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR<<1, 0x6B, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 800089c:	2368      	movs	r3, #104	@ 0x68
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	b299      	uxth	r1, r3
 80008a2:	2364      	movs	r3, #100	@ 0x64
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	2301      	movs	r3, #1
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	1dbb      	adds	r3, r7, #6
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	226b      	movs	r2, #107	@ 0x6b
 80008b2:	481d      	ldr	r0, [pc, #116]	@ (8000928 <testMPU6050+0xc0>)
 80008b4:	f000 feda 	bl	800166c <HAL_I2C_Mem_Write>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(10);
 80008bc:	200a      	movs	r0, #10
 80008be:	f000 fae9 	bl	8000e94 <HAL_Delay>

    // (c) Read back PWR_MGMT_1 to verify
    val = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	71bb      	strb	r3, [r7, #6]
    st = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR<<1, 0x6B, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 80008c6:	2368      	movs	r3, #104	@ 0x68
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	b299      	uxth	r1, r3
 80008cc:	2364      	movs	r3, #100	@ 0x64
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	226b      	movs	r2, #107	@ 0x6b
 80008dc:	4812      	ldr	r0, [pc, #72]	@ (8000928 <testMPU6050+0xc0>)
 80008de:	f000 ffbf 	bl	8001860 <HAL_I2C_Mem_Read>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    printf("PWR_MGMT_1 = 0x%02X\r\n", val);  // expect 0x01
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4810      	ldr	r0, [pc, #64]	@ (800092c <testMPU6050+0xc4>)
 80008ec:	f005 ff04 	bl	80066f8 <iprintf>

    // (d) WHO_AM_I should be 0x68 on genuine 6050
    uint8_t who = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	717b      	strb	r3, [r7, #5]
    st = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDR<<1, 0x75, I2C_MEMADD_SIZE_8BIT, &who, 1, 100);
 80008f4:	2368      	movs	r3, #104	@ 0x68
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	b299      	uxth	r1, r3
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	1d7b      	adds	r3, r7, #5
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	2275      	movs	r2, #117	@ 0x75
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <testMPU6050+0xc0>)
 800090c:	f000 ffa8 	bl	8001860 <HAL_I2C_Mem_Read>
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
    printf("WHO_AM_I = 0x%02X\r\n", who);     // expect 0x68
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <testMPU6050+0xc8>)
 800091a:	f005 feed 	bl	80066f8 <iprintf>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000088 	.word	0x20000088
 800092c:	080074a8 	.word	0x080074a8
 8000930:	080074c0 	.word	0x080074c0

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Go through all possible i2c addresses
  printf("Hello world\n");
 800093c:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <StartDefaultTask+0x7c>)
 800093e:	f005 ff4b 	bl	80067d8 <puts>
  for (uint8_t i = 0; i < 128; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e023      	b.n	8000990 <StartDefaultTask+0x5c>

	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	b29b      	uxth	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b299      	uxth	r1, r3
 8000950:	2305      	movs	r3, #5
 8000952:	2203      	movs	r2, #3
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <StartDefaultTask+0x80>)
 8000956:	f001 f9b5 	bl	8001cc4 <HAL_I2C_IsDeviceReady>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <StartDefaultTask+0x38>
		  // We got an ack
		  printf("%2x ", i);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	4619      	mov	r1, r3
 8000964:	4814      	ldr	r0, [pc, #80]	@ (80009b8 <StartDefaultTask+0x84>)
 8000966:	f005 fec7 	bl	80066f8 <iprintf>
 800096a:	e002      	b.n	8000972 <StartDefaultTask+0x3e>
	  } else {
		  printf("-- ");
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <StartDefaultTask+0x88>)
 800096e:	f005 fec3 	bl	80066f8 <iprintf>
	  }

	  if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <StartDefaultTask+0x56>
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <StartDefaultTask+0x56>
 8000984:	200a      	movs	r0, #10
 8000986:	f005 fec9 	bl	800671c <putchar>
  for (uint8_t i = 0; i < 128; i++) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	3301      	adds	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dad7      	bge.n	8000948 <StartDefaultTask+0x14>

  }

  printf("\n");
 8000998:	200a      	movs	r0, #10
 800099a:	f005 febf 	bl	800671c <putchar>
  printf("Testing MPU6050...\r\n");
 800099e:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <StartDefaultTask+0x8c>)
 80009a0:	f005 ff1a 	bl	80067d8 <puts>
  testMPU6050();
 80009a4:	f7ff ff60 	bl	8000868 <testMPU6050>

  for(;;){
    osDelay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f003 f821 	bl	80039f0 <osDelay>
 80009ae:	e7fb      	b.n	80009a8 <StartDefaultTask+0x74>
 80009b0:	080074d4 	.word	0x080074d4
 80009b4:	20000088 	.word	0x20000088
 80009b8:	080074e0 	.word	0x080074e0
 80009bc:	080074e8 	.word	0x080074e8
 80009c0:	080074ec 	.word	0x080074ec

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <tx_blocking>:

extern UART_HandleTypeDef huart2;

/* Optional: translate \n -> \r\n for nicer terminals */
static void tx_blocking(const uint8_t *buf, uint16_t len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 80009dc:	887a      	ldrh	r2, [r7, #2]
 80009de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <tx_blocking+0x24>)
 80009e6:	f002 fb37 	bl	8003058 <HAL_UART_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000dc 	.word	0x200000dc

080009f8 <_write>:

int _write(int file, char *data, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
    if (file == STDOUT_FILENO || file == STDERR_FILENO) {
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d002      	beq.n	8000a10 <_write+0x18>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d122      	bne.n	8000a56 <_write+0x5e>
        for (int i = 0; i < len; ++i) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e019      	b.n	8000a4a <_write+0x52>
            if (data[i] == '\n') {
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d109      	bne.n	8000a36 <_write+0x3e>
                const char crlf[2] = {'\r','\n'};
 8000a22:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8000a26:	823b      	strh	r3, [r7, #16]
                tx_blocking((const uint8_t*)crlf, 2);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffce 	bl	80009d0 <tx_blocking>
 8000a34:	e006      	b.n	8000a44 <_write+0x4c>
            } else {
                tx_blocking((uint8_t const *)&data[i], 1);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffc6 	bl	80009d0 <tx_blocking>
        for (int i = 0; i < len; ++i) {
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbe1      	blt.n	8000a16 <_write+0x1e>
            }
        }
        return len;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	e000      	b.n	8000a58 <_write+0x60>
    }
    return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	f06f 0001 	mvn.w	r0, #1
 8000aa6:	f000 fad6 	bl	8001056 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_I2C_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <HAL_I2C_MspInit+0x8c>)
 8000b14:	f000 fac8 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	@ 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bbe:	f000 fa73 	bl	80010a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	@ 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f91f 	bl	8000e54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c16:	f004 fb13 	bl	8005240 <xTaskGetSchedulerState>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d001      	beq.n	8000c24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c20:	f005 f90a 	bl	8005e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:

int _isatty(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f005 fd8c 	bl	8006818 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20020000 	.word	0x20020000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000128 	.word	0x20000128
 8000d34:	20004bd0 	.word	0x20004bd0

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d60:	f7ff ffea 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f005 fd4b 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc0d 	bl	80005ac <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000da0:	08007598 	.word	0x08007598
  ldr r2, =_sbss
 8000da4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000da8:	20004bcc 	.word	0x20004bcc

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f931 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe3c 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f93b 	bl	800108e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e30:	f000 f911 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000012c 	.word	0x2000012c

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000012c 	.word	0x2000012c

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffde 	bl	8000e7c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff47 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5c 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb0 	bl	8000ffc <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e159      	b.n	8001378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8148 	bne.w	8001372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a2 	beq.w	8001372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a52      	ldr	r2, [pc, #328]	@ (8001394 <HAL_GPIO_Init+0x2ec>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x202>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a48      	ldr	r2, [pc, #288]	@ (800139c <HAL_GPIO_Init+0x2f4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1fe>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <HAL_GPIO_Init+0x2f8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1fa>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	@ (80013a4 <HAL_GPIO_Init+0x2fc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1f6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a45      	ldr	r2, [pc, #276]	@ (80013a8 <HAL_GPIO_Init+0x300>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1f2>
 8001296:	2304      	movs	r3, #4
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129a:	2307      	movs	r3, #7
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	@ (8001394 <HAL_GPIO_Init+0x2ec>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a2f      	ldr	r2, [pc, #188]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a24      	ldr	r2, [pc, #144]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1a      	ldr	r2, [pc, #104]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f aea2 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e12b      	b.n	800164e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fb54 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001448:	f001 fd8e 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800144c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a81      	ldr	r2, [pc, #516]	@ (8001658 <HAL_I2C_Init+0x274>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d807      	bhi.n	8001468 <HAL_I2C_Init+0x84>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4a80      	ldr	r2, [pc, #512]	@ (800165c <HAL_I2C_Init+0x278>)
 800145c:	4293      	cmp	r3, r2
 800145e:	bf94      	ite	ls
 8001460:	2301      	movls	r3, #1
 8001462:	2300      	movhi	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e006      	b.n	8001476 <HAL_I2C_Init+0x92>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a7d      	ldr	r2, [pc, #500]	@ (8001660 <HAL_I2C_Init+0x27c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0e7      	b.n	800164e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a78      	ldr	r2, [pc, #480]	@ (8001664 <HAL_I2C_Init+0x280>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001658 <HAL_I2C_Init+0x274>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d802      	bhi.n	80014b8 <HAL_I2C_Init+0xd4>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3301      	adds	r3, #1
 80014b6:	e009      	b.n	80014cc <HAL_I2C_Init+0xe8>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	4a69      	ldr	r2, [pc, #420]	@ (8001668 <HAL_I2C_Init+0x284>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	3301      	adds	r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	495c      	ldr	r1, [pc, #368]	@ (8001658 <HAL_I2C_Init+0x274>)
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d819      	bhi.n	8001520 <HAL_I2C_Init+0x13c>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e59      	subs	r1, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fa:	1c59      	adds	r1, r3, #1
 80014fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001500:	400b      	ands	r3, r1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00a      	beq.n	800151c <HAL_I2C_Init+0x138>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e59      	subs	r1, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fbb1 f3f3 	udiv	r3, r1, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151a:	e051      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 800151c:	2304      	movs	r3, #4
 800151e:	e04f      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_I2C_Init+0x168>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e012      	b.n	8001572 <HAL_I2C_Init+0x18e>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Init+0x196>
 8001576:	2301      	movs	r3, #1
 8001578:	e022      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <HAL_I2C_Init+0x1bc>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e58      	subs	r0, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	440b      	add	r3, r1
 8001590:	fbb0 f3f3 	udiv	r3, r0, r3
 8001594:	3301      	adds	r3, #1
 8001596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159e:	e00f      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	6809      	ldr	r1, [r1, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6911      	ldr	r1, [r2, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68d2      	ldr	r2, [r2, #12]
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	000186a0 	.word	0x000186a0
 800165c:	001e847f 	.word	0x001e847f
 8001660:	003d08ff 	.word	0x003d08ff
 8001664:	431bde83 	.word	0x431bde83
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4603      	mov	r3, r0
 800167c:	817b      	strh	r3, [r7, #10]
 800167e:	460b      	mov	r3, r1
 8001680:	813b      	strh	r3, [r7, #8]
 8001682:	4613      	mov	r3, r2
 8001684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001686:	f7ff fbf9 	bl	8000e7c <HAL_GetTick>
 800168a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b20      	cmp	r3, #32
 8001696:	f040 80d9 	bne.w	800184c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2319      	movs	r3, #25
 80016a0:	2201      	movs	r2, #1
 80016a2:	496d      	ldr	r1, [pc, #436]	@ (8001858 <HAL_I2C_Mem_Write+0x1ec>)
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 fdb9 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0cc      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Mem_Write+0x56>
 80016be:	2302      	movs	r3, #2
 80016c0:	e0c5      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d007      	beq.n	80016e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2221      	movs	r2, #33	@ 0x21
 80016fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a4d      	ldr	r2, [pc, #308]	@ (800185c <HAL_I2C_Mem_Write+0x1f0>)
 8001728:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800172a:	88f8      	ldrh	r0, [r7, #6]
 800172c:	893a      	ldrh	r2, [r7, #8]
 800172e:	8979      	ldrh	r1, [r7, #10]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4603      	mov	r3, r0
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fbf0 	bl	8001f20 <I2C_RequestMemoryWrite>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d052      	beq.n	80017ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e081      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fe7e 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	2b04      	cmp	r3, #4
 8001760:	d107      	bne.n	8001772 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11b      	bne.n	80017ec <HAL_I2C_Mem_Write+0x180>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d017      	beq.n	80017ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1aa      	bne.n	800174a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fe71 	bl	80024e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2b04      	cmp	r3, #4
 800180a:	d107      	bne.n	800181c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e016      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00100002 	.word	0x00100002
 800185c:	ffff0000 	.word	0xffff0000

08001860 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	460b      	mov	r3, r1
 8001874:	813b      	strh	r3, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff faff 	bl	8000e7c <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	f040 8214 	bne.w	8001cb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2319      	movs	r3, #25
 8001894:	2201      	movs	r2, #1
 8001896:	497b      	ldr	r1, [pc, #492]	@ (8001a84 <HAL_I2C_Mem_Read+0x224>)
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fcbf 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	e207      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Mem_Read+0x56>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e200      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2222      	movs	r2, #34	@ 0x22
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2240      	movs	r2, #64	@ 0x40
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a88 <HAL_I2C_Mem_Read+0x228>)
 800191c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800191e:	88f8      	ldrh	r0, [r7, #6]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4603      	mov	r3, r0
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fb8c 	bl	800204c <I2C_RequestMemoryRead>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1bc      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e190      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	2b01      	cmp	r3, #1
 8001974:	d11b      	bne.n	80019ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e170      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d11b      	bne.n	80019ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	e150      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a04:	e144      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	f200 80f1 	bhi.w	8001bf2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d123      	bne.n	8001a60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fda7 	bl	8002570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e145      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a5e:	e117      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d14e      	bne.n	8001b06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4906      	ldr	r1, [pc, #24]	@ (8001a8c <HAL_I2C_Mem_Read+0x22c>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fbd2 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e11a      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b04:	e0c4      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	496c      	ldr	r1, [pc, #432]	@ (8001cc0 <HAL_I2C_Mem_Read+0x460>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fb83 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0cb      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4955      	ldr	r1, [pc, #340]	@ (8001cc0 <HAL_I2C_Mem_Read+0x460>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fb55 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e09d      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf0:	e04e      	b.n	8001c90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fcba 	bl	8002570 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e058      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d124      	bne.n	8001c90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f aeb6 	bne.w	8001a06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	00010004 	.word	0x00010004

08001cc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff f8d2 	bl	8000e7c <HAL_GetTick>
 8001cd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	f040 8111 	bne.w	8001f0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2319      	movs	r3, #25
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4988      	ldr	r1, [pc, #544]	@ (8001f18 <HAL_I2C_IsDeviceReady+0x254>)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fa90 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d02:	2302      	movs	r3, #2
 8001d04:	e104      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_I2C_IsDeviceReady+0x50>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0fd      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d007      	beq.n	8001d3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2224      	movs	r2, #36	@ 0x24
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a70      	ldr	r2, [pc, #448]	@ (8001f1c <HAL_I2C_IsDeviceReady+0x258>)
 8001d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa4e 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d94:	d103      	bne.n	8001d9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0b6      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001db0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001db2:	f7ff f863 	bl	8000e7c <HAL_GetTick>
 8001db6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001de6:	e025      	b.n	8001e34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001de8:	f7ff f848 	bl	8000e7c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d302      	bcc.n	8001dfe <HAL_I2C_IsDeviceReady+0x13a>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	22a0      	movs	r2, #160	@ 0xa0
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e3e:	d005      	beq.n	8001e4c <HAL_I2C_IsDeviceReady+0x188>
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_I2C_IsDeviceReady+0x188>
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0cd      	beq.n	8001de8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d129      	bne.n	8001eb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2319      	movs	r3, #25
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4921      	ldr	r1, [pc, #132]	@ (8001f18 <HAL_I2C_IsDeviceReady+0x254>)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f9c2 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e036      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e02c      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ece:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2319      	movs	r3, #25
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	490f      	ldr	r1, [pc, #60]	@ (8001f18 <HAL_I2C_IsDeviceReady+0x254>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f99e 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e012      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f4ff af32 	bcc.w	8001d5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
  }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	00100002 	.word	0x00100002
 8001f1c:	ffff0000 	.word	0xffff0000

08001f20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	817b      	strh	r3, [r7, #10]
 8001f32:	460b      	mov	r3, r1
 8001f34:	813b      	strh	r3, [r7, #8]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f960 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f70:	d103      	bne.n	8001f7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e05f      	b.n	800203e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	492d      	ldr	r1, [pc, #180]	@ (8002048 <I2C_RequestMemoryWrite+0x128>)
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f9bb 	bl	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e04c      	b.n	800203e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbc:	6a39      	ldr	r1, [r7, #32]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fa46 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00d      	beq.n	8001fe6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d107      	bne.n	8001fe2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e02b      	b.n	800203e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fec:	893b      	ldrh	r3, [r7, #8]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	e021      	b.n	800203c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff8:	893b      	ldrh	r3, [r7, #8]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fa20 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	2b04      	cmp	r3, #4
 800201c:	d107      	bne.n	800202e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800202c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e005      	b.n	800203e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002032:	893b      	ldrh	r3, [r7, #8]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	00010002 	.word	0x00010002

0800204c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4603      	mov	r3, r0
 800205c:	817b      	strh	r3, [r7, #10]
 800205e:	460b      	mov	r3, r1
 8002060:	813b      	strh	r3, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002074:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f8c2 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ac:	d103      	bne.n	80020b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0aa      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ba:	897b      	ldrh	r3, [r7, #10]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	4952      	ldr	r1, [pc, #328]	@ (8002218 <I2C_RequestMemoryRead+0x1cc>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f91d 	bl	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e097      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	6a39      	ldr	r1, [r7, #32]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f9a8 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	2b04      	cmp	r3, #4
 800210c:	d107      	bne.n	800211e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e076      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	e021      	b.n	8002178 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002134:	893b      	ldrh	r3, [r7, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	6a39      	ldr	r1, [r7, #32]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f982 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2b04      	cmp	r3, #4
 8002158:	d107      	bne.n	800216a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002168:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e050      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800216e:	893b      	ldrh	r3, [r7, #8]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217a:	6a39      	ldr	r1, [r7, #32]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f967 	bl	8002450 <I2C_WaitOnTXEFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	2b04      	cmp	r3, #4
 800218e:	d107      	bne.n	80021a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e035      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f82b 	bl	800221c <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021da:	d103      	bne.n	80021e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e013      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021e8:	897b      	ldrh	r3, [r7, #10]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	4906      	ldr	r1, [pc, #24]	@ (8002218 <I2C_RequestMemoryRead+0x1cc>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f886 	bl	8002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	00010002 	.word	0x00010002

0800221c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222c:	e048      	b.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002234:	d044      	beq.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7fe fe21 	bl	8000e7c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d139      	bne.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10d      	bne.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	43da      	mvns	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	e00c      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	429a      	cmp	r2, r3
 8002290:	d116      	bne.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e023      	b.n	8002308 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	43da      	mvns	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4013      	ands	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	e00c      	b.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	429a      	cmp	r2, r3
 8002304:	d093      	beq.n	800222e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800231e:	e071      	b.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232e:	d123      	bne.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e067      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800237e:	d041      	beq.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002380:	f7fe fd7c 	bl	8000e7c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d302      	bcc.n	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d136      	bne.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4013      	ands	r3, r2
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	e00b      	b.n	80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	43da      	mvns	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e021      	b.n	8002448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10c      	bne.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e00b      	b.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	f47f af6d 	bne.w	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245c:	e034      	b.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8e3 	bl	800262a <I2C_IsAcknowledgeFailed>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e034      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002474:	d028      	beq.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fd01 	bl	8000e7c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11d      	bne.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d016      	beq.n	80024c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	d1c3      	bne.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ec:	e034      	b.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f89b 	bl	800262a <I2C_IsAcknowledgeFailed>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e034      	b.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002504:	d028      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7fe fcb9 	bl	8000e7c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11d      	bne.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d016      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e007      	b.n	8002568 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d1c3      	bne.n	80024ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800257c:	e049      	b.n	8002612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d119      	bne.n	80025c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e030      	b.n	8002622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7fe fc5c 	bl	8000e7c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11d      	bne.n	8002612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	d016      	beq.n	8002612 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e007      	b.n	8002622 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	2b40      	cmp	r3, #64	@ 0x40
 800261e:	d1ae      	bne.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002640:	d11b      	bne.n	800267a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800264a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e267      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026a6:	4b88      	ldr	r3, [pc, #544]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d00c      	beq.n	80026cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b85      	ldr	r3, [pc, #532]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d112      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026be:	4b82      	ldr	r3, [pc, #520]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b7e      	ldr	r3, [pc, #504]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d157      	bne.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e242      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x74>
 80026ee:	4b76      	ldr	r3, [pc, #472]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a75      	ldr	r2, [pc, #468]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6f      	ldr	r2, [pc, #444]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6d      	ldr	r3, [pc, #436]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6c      	ldr	r2, [pc, #432]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 8002720:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a68      	ldr	r2, [pc, #416]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b66      	ldr	r3, [pc, #408]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a65      	ldr	r2, [pc, #404]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fb9c 	bl	8000e7c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fb98 	bl	8000e7c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e207      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b5b      	ldr	r3, [pc, #364]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xc0>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fb88 	bl	8000e7c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fb84 	bl	8000e7c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1f3      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800279e:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b6:	4b44      	ldr	r3, [pc, #272]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	4b41      	ldr	r3, [pc, #260]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1c7      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b3b      	ldr	r3, [pc, #236]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4937      	ldr	r1, [pc, #220]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCC_OscConfig+0x244>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fb3d 	bl	8000e7c <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fb39 	bl	8000e7c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1a8      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4925      	ldr	r1, [pc, #148]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_RCC_OscConfig+0x244>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fb1c 	bl	8000e7c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fb18 	bl	8000e7c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e187      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_RCC_OscConfig+0x248>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fafc 	bl	8000e7c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe faf8 	bl	8000e7c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e167      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x200>
 80028a6:	e01b      	b.n	80028e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x248>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fae5 	bl	8000e7c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	e00e      	b.n	80028d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fae1 	bl	8000e7c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d907      	bls.n	80028d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e150      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470000 	.word	0x42470000
 80028d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ea      	bne.n	80028b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8097 	beq.w	8002a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b81      	ldr	r3, [pc, #516]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b7d      	ldr	r3, [pc, #500]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a7c      	ldr	r2, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b7a      	ldr	r3, [pc, #488]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b77      	ldr	r3, [pc, #476]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b74      	ldr	r3, [pc, #464]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a73      	ldr	r2, [pc, #460]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe faa1 	bl	8000e7c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fa9d 	bl	8000e7c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e10c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b6a      	ldr	r3, [pc, #424]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ea>
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a63      	ldr	r2, [pc, #396]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	e01c      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x30c>
 800297a:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a5e      	ldr	r2, [pc, #376]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	@ 0x70
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002994:	4b58      	ldr	r3, [pc, #352]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a57      	ldr	r2, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	4b55      	ldr	r3, [pc, #340]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4a54      	ldr	r2, [pc, #336]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fa62 	bl	8000e7c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fa5e 	bl	8000e7c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0cb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ee      	beq.n	80029bc <HAL_RCC_OscConfig+0x334>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fa4c 	bl	8000e7c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe fa48 	bl	8000e7c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0b5      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ee      	bne.n	80029e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a1 	beq.w	8002b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a26:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d05c      	beq.n	8002aec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d141      	bne.n	8002abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fa1c 	bl	8000e7c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fa18 	bl	8000e7c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e087      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	491b      	ldr	r1, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe f9f1 	bl	8000e7c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe f9ed 	bl	8000e7c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e05c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x416>
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f9da 	bl	8000e7c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe f9d6 	bl	8000e7c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e045      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x444>
 8002aea:	e03d      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e038      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d028      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d121      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0cc      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d90c      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b65      	ldr	r3, [pc, #404]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b63      	ldr	r3, [pc, #396]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b8      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b59      	ldr	r3, [pc, #356]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be4:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a52      	ldr	r2, [pc, #328]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	494d      	ldr	r1, [pc, #308]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d044      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b3f      	ldr	r3, [pc, #252]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e06f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b3b      	ldr	r3, [pc, #236]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e067      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4934      	ldr	r1, [pc, #208]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe f908 	bl	8000e7c <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe f904 	bl	8000e7c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e04f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d20c      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4916      	ldr	r1, [pc, #88]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 f821 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490a      	ldr	r1, [pc, #40]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f868 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023c00 	.word	0x40023c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	0800753c 	.word	0x0800753c
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b094      	sub	sp, #80	@ 0x50
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5c:	4b79      	ldr	r3, [pc, #484]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d00d      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x40>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	f200 80e1 	bhi.w	8002f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x34>
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d76:	e0db      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b73      	ldr	r3, [pc, #460]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7c:	e0db      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b73      	ldr	r3, [pc, #460]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d82:	e0d8      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b6f      	ldr	r3, [pc, #444]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	2200      	movs	r2, #0
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc8:	0150      	lsls	r0, r2, #5
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4621      	mov	r1, r4
 8002dd0:	1a51      	subs	r1, r2, r1
 8002dd2:	6139      	str	r1, [r7, #16]
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de8:	4659      	mov	r1, fp
 8002dea:	018b      	lsls	r3, r1, #6
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df2:	4651      	mov	r1, sl
 8002df4:	018a      	lsls	r2, r1, #6
 8002df6:	4651      	mov	r1, sl
 8002df8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e16:	4690      	mov	r8, r2
 8002e18:	4699      	mov	r9, r3
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	eb18 0303 	adds.w	r3, r8, r3
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	462b      	mov	r3, r5
 8002e24:	eb49 0303 	adc.w	r3, r9, r3
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e36:	4629      	mov	r1, r5
 8002e38:	024b      	lsls	r3, r1, #9
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e40:	4621      	mov	r1, r4
 8002e42:	024a      	lsls	r2, r1, #9
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e54:	f7fd fa14 	bl	8000280 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e60:	e058      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e62:	4b38      	ldr	r3, [pc, #224]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	f04f 0000 	mov.w	r0, #0
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	0159      	lsls	r1, r3, #5
 8002e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8e:	0150      	lsls	r0, r2, #5
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4641      	mov	r1, r8
 8002e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	00eb      	lsls	r3, r5, #3
 8002ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eca:	00e2      	lsls	r2, r4, #3
 8002ecc:	4614      	mov	r4, r2
 8002ece:	461d      	mov	r5, r3
 8002ed0:	4643      	mov	r3, r8
 8002ed2:	18e3      	adds	r3, r4, r3
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	eb45 0303 	adc.w	r3, r5, r3
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eea:	4629      	mov	r1, r5
 8002eec:	028b      	lsls	r3, r1, #10
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	028a      	lsls	r2, r1, #10
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efe:	2200      	movs	r2, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	61fa      	str	r2, [r7, #28]
 8002f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f08:	f7fd f9ba 	bl	8000280 <__aeabi_uldivmod>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4613      	mov	r3, r2
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3750      	adds	r7, #80	@ 0x50
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	007a1200 	.word	0x007a1200

08002f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	0800754c 	.word	0x0800754c

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f94:	f7ff ffdc 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0b5b      	lsrs	r3, r3, #13
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	0800754c 	.word	0x0800754c

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fdb2 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f973 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d175      	bne.n	8003164 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Transmit+0x2c>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e06e      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	@ 0x21
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7fd fef1 	bl	8000e7c <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030cc:	e02e      	b.n	800312c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f848 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03a      	b.n	8003166 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cb      	bne.n	80030ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	@ 0x40
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f814 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	e03b      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003186:	d037      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fd fe78 	bl	8000e7c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <UART_WaitOnFlagUntilTimeout+0x30>
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e03a      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d023      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b80      	cmp	r3, #128	@ 0x80
 80031b4:	d020      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d01d      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d116      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f81d 	bl	8003220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2208      	movs	r2, #8
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00f      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d0b4      	beq.n	8003180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b095      	sub	sp, #84	@ 0x54
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800323e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003248:	643a      	str	r2, [r7, #64]	@ 0x40
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800324e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	61fb      	str	r3, [r7, #28]
   return(result);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800327c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	2b01      	cmp	r3, #1
 8003296:	d119      	bne.n	80032cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032b8:	61ba      	str	r2, [r7, #24]
 80032ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032da:	bf00      	nop
 80032dc:	3754      	adds	r7, #84	@ 0x54
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c0      	sub	sp, #256	@ 0x100
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	ea40 0301 	orr.w	r3, r0, r1
 8003310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800334e:	430b      	orrs	r3, r1
 8003350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	ea40 0301 	orr.w	r3, r0, r1
 800336e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b8f      	ldr	r3, [pc, #572]	@ (80035b4 <UART_SetConfig+0x2cc>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0xa0>
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8d      	ldr	r3, [pc, #564]	@ (80035b8 <UART_SetConfig+0x2d0>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff fe02 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
 800338c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003390:	e003      	b.n	800339a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7ff fde9 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8003396:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a4:	f040 810c 	bne.w	80035c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033c2:	415b      	adcs	r3, r3
 80033c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ca:	4621      	mov	r1, r4
 80033cc:	eb12 0801 	adds.w	r8, r2, r1
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb43 0901 	adc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800340e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	18db      	adds	r3, r3, r3
 800341a:	653b      	str	r3, [r7, #80]	@ 0x50
 800341c:	4613      	mov	r3, r2
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	657b      	str	r3, [r7, #84]	@ 0x54
 8003424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800342c:	f7fc ff28 	bl	8000280 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <UART_SetConfig+0x2d4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003448:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800344c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003458:	415b      	adcs	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800345c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003460:	4641      	mov	r1, r8
 8003462:	eb12 0a01 	adds.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0b01 	adc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800347c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003480:	4692      	mov	sl, r2
 8003482:	469b      	mov	fp, r3
 8003484:	4643      	mov	r3, r8
 8003486:	eb1a 0303 	adds.w	r3, sl, r3
 800348a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800348e:	464b      	mov	r3, r9
 8003490:	eb4b 0303 	adc.w	r3, fp, r3
 8003494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034c2:	f7fc fedd 	bl	8000280 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	@ 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034e2:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <UART_SetConfig+0x2d4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034f0:	441c      	add	r4, r3
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6339      	str	r1, [r7, #48]	@ 0x30
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003548:	464b      	mov	r3, r9
 800354a:	460a      	mov	r2, r1
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800357a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800357e:	f7fc fe7f 	bl	8000280 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <UART_SetConfig+0x2d4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	@ 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	@ 0x32
 800359a:	4a08      	ldr	r2, [pc, #32]	@ (80035bc <UART_SetConfig+0x2d4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4422      	add	r2, r4
 80035ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b0:	e106      	b.n	80037c0 <UART_SetConfig+0x4d8>
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035d2:	4642      	mov	r2, r8
 80035d4:	464b      	mov	r3, r9
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	6239      	str	r1, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	4641      	mov	r1, r8
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0501 	adc.w	r5, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003608:	464b      	mov	r3, r9
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800362e:	4629      	mov	r1, r5
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4621      	mov	r1, r4
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003640:	f7fc fe1e 	bl	8000280 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b60      	ldr	r3, [pc, #384]	@ (80037cc <UART_SetConfig+0x4e4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800365c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	415b      	adcs	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	4641      	mov	r1, r8
 8003676:	1851      	adds	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4649      	mov	r1, r9
 800367c:	414b      	adcs	r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4651      	mov	r1, sl
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4642      	mov	r2, r8
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036cc:	4649      	mov	r1, r9
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d6:	4641      	mov	r1, r8
 80036d8:	008a      	lsls	r2, r1, #2
 80036da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036de:	f7fc fdcf 	bl	8000280 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <UART_SetConfig+0x4e4>)
 80036ea:	fba3 2301 	umull	r2, r3, r3, r1
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2264      	movs	r2, #100	@ 0x64
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	1acb      	subs	r3, r1, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	@ 0x32
 80036fc:	4a33      	ldr	r2, [pc, #204]	@ (80037cc <UART_SetConfig+0x4e4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003708:	441c      	add	r4, r3
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	673b      	str	r3, [r7, #112]	@ 0x70
 8003712:	677a      	str	r2, [r7, #116]	@ 0x74
 8003714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	415b      	adcs	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800375a:	464b      	mov	r3, r9
 800375c:	460a      	mov	r2, r1
 800375e:	eb42 0303 	adc.w	r3, r2, r3
 8003762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	663b      	str	r3, [r7, #96]	@ 0x60
 800376e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800377c:	4649      	mov	r1, r9
 800377e:	008b      	lsls	r3, r1, #2
 8003780:	4641      	mov	r1, r8
 8003782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003786:	4641      	mov	r1, r8
 8003788:	008a      	lsls	r2, r1, #2
 800378a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800378e:	f7fc fd77 	bl	8000280 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <UART_SetConfig+0x4e4>)
 8003798:	fba3 1302 	umull	r1, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2164      	movs	r1, #100	@ 0x64
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	3332      	adds	r3, #50	@ 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	@ (80037cc <UART_SetConfig+0x4e4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4422      	add	r2, r4
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <__NVIC_SetPriority>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	@ (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	@ (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003828:	2100      	movs	r1, #0
 800382a:	f06f 0004 	mvn.w	r0, #4
 800382e:	f7ff ffcf 	bl	80037d0 <__NVIC_SetPriority>
#endif
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383e:	f3ef 8305 	mrs	r3, IPSR
 8003842:	603b      	str	r3, [r7, #0]
  return(result);
 8003844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800384a:	f06f 0305 	mvn.w	r3, #5
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e00c      	b.n	800386c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <osKernelInitialize+0x44>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <osKernelInitialize+0x44>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e002      	b.n	800386c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800386a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000130 	.word	0x20000130

08003880 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003886:	f3ef 8305 	mrs	r3, IPSR
 800388a:	603b      	str	r3, [r7, #0]
  return(result);
 800388c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003892:	f06f 0305 	mvn.w	r3, #5
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e010      	b.n	80038bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800389a:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <osKernelStart+0x48>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d109      	bne.n	80038b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038a2:	f7ff ffbf 	bl	8003824 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038a6:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <osKernelStart+0x48>)
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038ac:	f001 f87a 	bl	80049a4 <vTaskStartScheduler>
      stat = osOK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e002      	b.n	80038bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038bc:	687b      	ldr	r3, [r7, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000130 	.word	0x20000130

080038cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	@ 0x38
 80038d0:	af04      	add	r7, sp, #16
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038dc:	f3ef 8305 	mrs	r3, IPSR
 80038e0:	617b      	str	r3, [r7, #20]
  return(result);
 80038e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d17e      	bne.n	80039e6 <osThreadNew+0x11a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07b      	beq.n	80039e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038ee:	2380      	movs	r3, #128	@ 0x80
 80038f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038f2:	2318      	movs	r3, #24
 80038f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d045      	beq.n	8003992 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <osThreadNew+0x48>
        name = attr->name;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <osThreadNew+0x6e>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b38      	cmp	r3, #56	@ 0x38
 800392c:	d805      	bhi.n	800393a <osThreadNew+0x6e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <osThreadNew+0x72>
        return (NULL);
 800393a:	2300      	movs	r3, #0
 800393c:	e054      	b.n	80039e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <osThreadNew+0xa8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b5b      	cmp	r3, #91	@ 0x5b
 800395c:	d90a      	bls.n	8003974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <osThreadNew+0xa8>
        mem = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e010      	b.n	8003996 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10c      	bne.n	8003996 <osThreadNew+0xca>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <osThreadNew+0xca>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <osThreadNew+0xca>
          mem = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	e001      	b.n	8003996 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d110      	bne.n	80039be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fe1a 	bl	80045ec <xTaskCreateStatic>
 80039b8:	4603      	mov	r3, r0
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e013      	b.n	80039e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d110      	bne.n	80039e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fe68 	bl	80046ac <xTaskCreate>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <osThreadNew+0x11a>
            hTask = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039e6:	693b      	ldr	r3, [r7, #16]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3728      	adds	r7, #40	@ 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f8:	f3ef 8305 	mrs	r3, IPSR
 80039fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <osDelay+0x1c>
    stat = osErrorISR;
 8003a04:	f06f 0305 	mvn.w	r3, #5
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e007      	b.n	8003a1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 ff8e 	bl	8004938 <vTaskDelay>
    }
  }

  return (stat);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a07      	ldr	r2, [pc, #28]	@ (8003a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	@ (8003a58 <vApplicationGetIdleTaskMemory+0x30>)
 8003a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000134 	.word	0x20000134
 8003a58:	20000190 	.word	0x20000190

08003a5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	@ (8003a88 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4a06      	ldr	r2, [pc, #24]	@ (8003a8c <vApplicationGetTimerTaskMemory+0x30>)
 8003a72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a7a:	601a      	str	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000390 	.word	0x20000390
 8003a8c:	200003ec 	.word	0x200003ec

08003a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f103 0208 	add.w	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f103 0208 	add.w	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f103 0208 	add.w	r2, r3, #8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b48:	d103      	bne.n	8003b52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e00c      	b.n	8003b6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3308      	adds	r3, #8
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e002      	b.n	8003b60 <vListInsert+0x2e>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d2f6      	bcs.n	8003b5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	601a      	str	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6852      	ldr	r2, [r2, #4]
 8003bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d103      	bne.n	8003bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	1e5a      	subs	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c24:	f002 f878 	bl	8005d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	3b01      	subs	r3, #1
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	22ff      	movs	r2, #255	@ 0xff
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	22ff      	movs	r2, #255	@ 0xff
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01a      	beq.n	8003cb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3310      	adds	r3, #16
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f91a 	bl	8004ec0 <xTaskRemoveFromEventList>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c92:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc8 <xQueueGenericReset+0xd0>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	e009      	b.n	8003cb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3310      	adds	r3, #16
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fef1 	bl	8003a90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3324      	adds	r3, #36	@ 0x24
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff feec 	bl	8003a90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cb8:	f002 f860 	bl	8005d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	@ 0x38
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <xQueueGenericCreateStatic+0x56>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <xQueueGenericCreateStatic+0x5a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <xQueueGenericCreateStatic+0x5c>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	623b      	str	r3, [r7, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <xQueueGenericCreateStatic+0x84>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <xQueueGenericCreateStatic+0x88>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <xQueueGenericCreateStatic+0x8a>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	61fb      	str	r3, [r7, #28]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d72:	2350      	movs	r3, #80	@ 0x50
 8003d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b50      	cmp	r3, #80	@ 0x50
 8003d7a:	d00b      	beq.n	8003d94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	61bb      	str	r3, [r7, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003da8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f805 	bl	8003dc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	@ 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e002      	b.n	8003de8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003df4:	2101      	movs	r1, #1
 8003df6:	69b8      	ldr	r0, [r7, #24]
 8003df8:	f7ff fefe 	bl	8003bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08e      	sub	sp, #56	@ 0x38
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <xQueueGenericSend+0x34>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <xQueueGenericSend+0x42>
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericSend+0x46>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericSend+0x48>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <xQueueGenericSend+0x64>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d103      	bne.n	8003e7e <xQueueGenericSend+0x72>
 8003e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <xQueueGenericSend+0x76>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <xQueueGenericSend+0x78>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueGenericSend+0x94>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	623b      	str	r3, [r7, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea0:	f001 f9ce 	bl	8005240 <xTaskGetSchedulerState>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <xQueueGenericSend+0xa4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <xQueueGenericSend+0xa8>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <xQueueGenericSend+0xaa>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61fb      	str	r3, [r7, #28]
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed2:	f001 ff21 	bl	8005d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <xQueueGenericSend+0xdc>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d129      	bne.n	8003f3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eee:	f000 fa0f 	bl	8004310 <prvCopyDataToQueue>
 8003ef2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	3324      	adds	r3, #36	@ 0x24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 ffdd 	bl	8004ec0 <xTaskRemoveFromEventList>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800400c <xQueueGenericSend+0x200>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	e00a      	b.n	8003f34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f24:	4b39      	ldr	r3, [pc, #228]	@ (800400c <xQueueGenericSend+0x200>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f34:	f001 ff22 	bl	8005d7c <vPortExitCritical>
				return pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e063      	b.n	8004004 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f42:	f001 ff1b 	bl	8005d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e05c      	b.n	8004004 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f817 	bl	8004f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f5e:	f001 ff0d 	bl	8005d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f62:	f000 fd87 	bl	8004a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f66:	f001 fed7 	bl	8005d18 <vPortEnterCritical>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f76:	d103      	bne.n	8003f80 <xQueueGenericSend+0x174>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f8c:	d103      	bne.n	8003f96 <xQueueGenericSend+0x18a>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f96:	f001 fef1 	bl	8005d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f9a:	1d3a      	adds	r2, r7, #4
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f806 	bl	8004fb4 <xTaskCheckForTimeOut>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d124      	bne.n	8003ff8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fb0:	f000 faa6 	bl	8004500 <prvIsQueueFull>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 ff2a 	bl	8004e1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fca:	f000 fa31 	bl	8004430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fce:	f000 fd5f 	bl	8004a90 <xTaskResumeAll>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f af7c 	bne.w	8003ed2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003fda:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <xQueueGenericSend+0x200>)
 8003fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	e772      	b.n	8003ed2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fee:	f000 fa1f 	bl	8004430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff2:	f000 fd4d 	bl	8004a90 <xTaskResumeAll>
 8003ff6:	e76c      	b.n	8003ed2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ffa:	f000 fa19 	bl	8004430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ffe:	f000 fd47 	bl	8004a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004002:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004004:	4618      	mov	r0, r3
 8004006:	3738      	adds	r7, #56	@ 0x38
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b090      	sub	sp, #64	@ 0x40
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueGenericSendFromISR+0x3e>
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <xQueueGenericSendFromISR+0x42>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericSendFromISR+0x44>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	e7fd      	b.n	800406c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d103      	bne.n	800407e <xQueueGenericSendFromISR+0x6e>
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <xQueueGenericSendFromISR+0x72>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <xQueueGenericSendFromISR+0x74>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	623b      	str	r3, [r7, #32]
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040a0:	f001 ff1a 	bl	8005ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040a4:	f3ef 8211 	mrs	r2, BASEPRI
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <xQueueGenericSendFromISR+0xc2>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d12f      	bne.n	8004132 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80040e8:	f000 f912 	bl	8004310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040f4:	d112      	bne.n	800411c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	3324      	adds	r3, #36	@ 0x24
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fedc 	bl	8004ec0 <xTaskRemoveFromEventList>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e007      	b.n	800412c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800411c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004120:	3301      	adds	r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	b25a      	sxtb	r2, r3
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800412c:	2301      	movs	r3, #1
 800412e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004130:	e001      	b.n	8004136 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004132:	2300      	movs	r3, #0
 8004134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004138:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004144:	4618      	mov	r0, r3
 8004146:	3740      	adds	r7, #64	@ 0x40
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	@ 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <xQueueReceive+0x32>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	623b      	str	r3, [r7, #32]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <xQueueReceive+0x40>
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <xQueueReceive+0x44>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <xQueueReceive+0x46>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <xQueueReceive+0x62>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	61fb      	str	r3, [r7, #28]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ae:	f001 f847 	bl	8005240 <xTaskGetSchedulerState>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <xQueueReceive+0x72>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueReceive+0x76>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueReceive+0x78>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <xQueueReceive+0x94>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61bb      	str	r3, [r7, #24]
}
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041e0:	f001 fd9a 	bl	8005d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01f      	beq.n	8004230 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041f4:	f000 f8f6 	bl	80043e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00f      	beq.n	8004228 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	3310      	adds	r3, #16
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe57 	bl	8004ec0 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004218:	4b3c      	ldr	r3, [pc, #240]	@ (800430c <xQueueReceive+0x1c0>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004228:	f001 fda8 	bl	8005d7c <vPortExitCritical>
				return pdPASS;
 800422c:	2301      	movs	r3, #1
 800422e:	e069      	b.n	8004304 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004236:	f001 fda1 	bl	8005d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800423a:	2300      	movs	r3, #0
 800423c:	e062      	b.n	8004304 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004244:	f107 0310 	add.w	r3, r7, #16
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fe9d 	bl	8004f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800424e:	2301      	movs	r3, #1
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004252:	f001 fd93 	bl	8005d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004256:	f000 fc0d 	bl	8004a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800425a:	f001 fd5d 	bl	8005d18 <vPortEnterCritical>
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004264:	b25b      	sxtb	r3, r3
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800426a:	d103      	bne.n	8004274 <xQueueReceive+0x128>
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427a:	b25b      	sxtb	r3, r3
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004280:	d103      	bne.n	800428a <xQueueReceive+0x13e>
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800428a:	f001 fd77 	bl	8005d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800428e:	1d3a      	adds	r2, r7, #4
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fe8c 	bl	8004fb4 <xTaskCheckForTimeOut>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d123      	bne.n	80042ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042a4:	f000 f916 	bl	80044d4 <prvIsQueueEmpty>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	3324      	adds	r3, #36	@ 0x24
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fdb0 	bl	8004e1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042be:	f000 f8b7 	bl	8004430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042c2:	f000 fbe5 	bl	8004a90 <xTaskResumeAll>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d189      	bne.n	80041e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80042cc:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <xQueueReceive+0x1c0>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	e780      	b.n	80041e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042e0:	f000 f8a6 	bl	8004430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042e4:	f000 fbd4 	bl	8004a90 <xTaskResumeAll>
 80042e8:	e77a      	b.n	80041e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042ec:	f000 f8a0 	bl	8004430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042f0:	f000 fbce 	bl	8004a90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042f6:	f000 f8ed 	bl	80044d4 <prvIsQueueEmpty>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f43f af6f 	beq.w	80041e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004304:	4618      	mov	r0, r3
 8004306:	3730      	adds	r7, #48	@ 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d14d      	bne.n	80043d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff9e 	bl	800527c <xTaskPriorityDisinherit>
 8004340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e043      	b.n	80043d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d119      	bne.n	8004384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6858      	ldr	r0, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	f002 fa9c 	bl	8006898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d32b      	bcc.n	80043d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e026      	b.n	80043d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68d8      	ldr	r0, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	461a      	mov	r2, r3
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	f002 fa82 	bl	8006898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439c:	425b      	negs	r3, r3
 800439e:	441a      	add	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d207      	bcs.n	80043c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	425b      	negs	r3, r3
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d105      	bne.n	80043d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80043da:	697b      	ldr	r3, [r7, #20]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	441a      	add	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d303      	bcc.n	8004418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68d9      	ldr	r1, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f002 fa38 	bl	8006898 <memcpy>
	}
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004438:	f001 fc6e 	bl	8005d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004444:	e011      	b.n	800446a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d012      	beq.n	8004474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3324      	adds	r3, #36	@ 0x24
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fd34 	bl	8004ec0 <xTaskRemoveFromEventList>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800445e:	f000 fe0d 	bl	800507c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	3b01      	subs	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800446a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	dce9      	bgt.n	8004446 <prvUnlockQueue+0x16>
 8004472:	e000      	b.n	8004476 <prvUnlockQueue+0x46>
					break;
 8004474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	22ff      	movs	r2, #255	@ 0xff
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800447e:	f001 fc7d 	bl	8005d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004482:	f001 fc49 	bl	8005d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800448c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800448e:	e011      	b.n	80044b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3310      	adds	r3, #16
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fd0f 	bl	8004ec0 <xTaskRemoveFromEventList>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044a8:	f000 fde8 	bl	800507c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044ac:	7bbb      	ldrb	r3, [r7, #14]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	dce9      	bgt.n	8004490 <prvUnlockQueue+0x60>
 80044bc:	e000      	b.n	80044c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	22ff      	movs	r2, #255	@ 0xff
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80044c8:	f001 fc58 	bl	8005d7c <vPortExitCritical>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044dc:	f001 fc1c 	bl	8005d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044e8:	2301      	movs	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e001      	b.n	80044f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044f2:	f001 fc43 	bl	8005d7c <vPortExitCritical>

	return xReturn;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004508:	f001 fc06 	bl	8005d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	429a      	cmp	r2, r3
 8004516:	d102      	bne.n	800451e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004518:	2301      	movs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e001      	b.n	8004522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f001 fc2b 	bl	8005d7c <vPortExitCritical>

	return xReturn;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e014      	b.n	800456a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004540:	4a0f      	ldr	r2, [pc, #60]	@ (8004580 <vQueueAddToRegistry+0x50>)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800454c:	490c      	ldr	r1, [pc, #48]	@ (8004580 <vQueueAddToRegistry+0x50>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <vQueueAddToRegistry+0x50>)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004562:	e006      	b.n	8004572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b07      	cmp	r3, #7
 800456e:	d9e7      	bls.n	8004540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	200007ec 	.word	0x200007ec

08004584 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004594:	f001 fbc0 	bl	8005d18 <vPortEnterCritical>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800459e:	b25b      	sxtb	r3, r3
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045a4:	d103      	bne.n	80045ae <vQueueWaitForMessageRestricted+0x2a>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ba:	d103      	bne.n	80045c4 <vQueueWaitForMessageRestricted+0x40>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045c4:	f001 fbda 	bl	8005d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3324      	adds	r3, #36	@ 0x24
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fc45 	bl	8004e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f7ff ff26 	bl	8004430 <prvUnlockQueue>
	}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	@ 0x38
 80045f0:	af04      	add	r7, sp, #16
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	623b      	str	r3, [r7, #32]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <xTaskCreateStatic+0x4a>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61fb      	str	r3, [r7, #28]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004636:	235c      	movs	r3, #92	@ 0x5c
 8004638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b5c      	cmp	r3, #92	@ 0x5c
 800463e:	d00b      	beq.n	8004658 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61bb      	str	r3, [r7, #24]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004658:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01e      	beq.n	800469e <xTaskCreateStatic+0xb2>
 8004660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004678:	2300      	movs	r3, #0
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f850 	bl	8004736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004696:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004698:	f000 f8de 	bl	8004858 <prvAddNewTaskToReadyList>
 800469c:	e001      	b.n	80046a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046a2:	697b      	ldr	r3, [r7, #20]
	}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	@ 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	@ 0x30
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 fc4b 	bl	8005f5c <pvPortMalloc>
 80046c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046ce:	205c      	movs	r0, #92	@ 0x5c
 80046d0:	f001 fc44 	bl	8005f5c <pvPortMalloc>
 80046d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80046e2:	e005      	b.n	80046f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	f001 fd07 	bl	80060f8 <vPortFree>
 80046ea:	e001      	b.n	80046f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d017      	beq.n	8004726 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	2300      	movs	r3, #0
 8004702:	9303      	str	r3, [sp, #12]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f80e 	bl	8004736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800471a:	69f8      	ldr	r0, [r7, #28]
 800471c:	f000 f89c 	bl	8004858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e002      	b.n	800472c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800472a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800472c:	69bb      	ldr	r3, [r7, #24]
	}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	21a5      	movs	r1, #165	@ 0xa5
 8004750:	f002 f84a 	bl	80067e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800475e:	3b01      	subs	r3, #1
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f023 0307 	bic.w	r3, r3, #7
 800476c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	617b      	str	r3, [r7, #20]
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01f      	beq.n	80047d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e012      	b.n	80047c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	7819      	ldrb	r1, [r3, #0]
 80047a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	3334      	adds	r3, #52	@ 0x34
 80047ac:	460a      	mov	r2, r1
 80047ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b0f      	cmp	r3, #15
 80047c6:	d9e9      	bls.n	800479c <prvInitialiseNewTask+0x66>
 80047c8:	e000      	b.n	80047cc <prvInitialiseNewTask+0x96>
			{
				break;
 80047ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d4:	e003      	b.n	80047de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	2b37      	cmp	r3, #55	@ 0x37
 80047e2:	d901      	bls.n	80047e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047e4:	2337      	movs	r3, #55	@ 0x37
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	2200      	movs	r2, #0
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	3304      	adds	r3, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f966 	bl	8003ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	3318      	adds	r3, #24
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff f961 	bl	8003ad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004822:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	2200      	movs	r2, #0
 8004828:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f001 f93e 	bl	8005ab8 <pxPortInitialiseStack>
 800483c:	4602      	mov	r2, r0
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800484c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484e:	bf00      	nop
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004860:	f001 fa5a 	bl	8005d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004864:	4b2d      	ldr	r3, [pc, #180]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	4a2c      	ldr	r2, [pc, #176]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 800486c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800486e:	4b2c      	ldr	r3, [pc, #176]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004876:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800487c:	4b27      	ldr	r3, [pc, #156]	@ (800491c <prvAddNewTaskToReadyList+0xc4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d110      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004884:	f000 fc1e 	bl	80050c4 <prvInitialiseTaskLists>
 8004888:	e00d      	b.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800488a:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <prvAddNewTaskToReadyList+0xcc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004892:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d802      	bhi.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <prvAddNewTaskToReadyList+0xd0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <prvAddNewTaskToReadyList+0xd0>)
 80048ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <prvAddNewTaskToReadyList+0xd0>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <prvAddNewTaskToReadyList+0xd4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <prvAddNewTaskToReadyList+0x74>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <prvAddNewTaskToReadyList+0xd4>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <prvAddNewTaskToReadyList+0xd8>)
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7ff f901 	bl	8003aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048e8:	f001 fa48 	bl	8005d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <prvAddNewTaskToReadyList+0xcc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <prvAddNewTaskToReadyList+0xc8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d207      	bcs.n	8004912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004902:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <prvAddNewTaskToReadyList+0xdc>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000d00 	.word	0x20000d00
 8004920:	2000082c 	.word	0x2000082c
 8004924:	20000d0c 	.word	0x20000d0c
 8004928:	20000d1c 	.word	0x20000d1c
 800492c:	20000d08 	.word	0x20000d08
 8004930:	20000830 	.word	0x20000830
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <vTaskDelay+0x64>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <vTaskDelay+0x32>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800496a:	f000 f883 	bl	8004a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800496e:	2100      	movs	r1, #0
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fcf3 	bl	800535c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004976:	f000 f88b 	bl	8004a90 <xTaskResumeAll>
 800497a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <vTaskDelay+0x68>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000d28 	.word	0x20000d28
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	@ 0x28
 80049a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049b2:	463a      	mov	r2, r7
 80049b4:	1d39      	adds	r1, r7, #4
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff f834 	bl	8003a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	9202      	str	r2, [sp, #8]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2300      	movs	r3, #0
 80049d0:	460a      	mov	r2, r1
 80049d2:	4922      	ldr	r1, [pc, #136]	@ (8004a5c <vTaskStartScheduler+0xb8>)
 80049d4:	4822      	ldr	r0, [pc, #136]	@ (8004a60 <vTaskStartScheduler+0xbc>)
 80049d6:	f7ff fe09 	bl	80045ec <xTaskCreateStatic>
 80049da:	4603      	mov	r3, r0
 80049dc:	4a21      	ldr	r2, [pc, #132]	@ (8004a64 <vTaskStartScheduler+0xc0>)
 80049de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <vTaskStartScheduler+0xc0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e001      	b.n	80049f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d102      	bne.n	80049fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049f8:	f000 fd04 	bl	8005404 <xTimerCreateTimerTask>
 80049fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d116      	bne.n	8004a32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
}
 8004a16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a18:	4b13      	ldr	r3, [pc, #76]	@ (8004a68 <vTaskStartScheduler+0xc4>)
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a20:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <vTaskStartScheduler+0xc8>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a26:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <vTaskStartScheduler+0xcc>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a2c:	f001 f8d0 	bl	8005bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a30:	e00f      	b.n	8004a52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a38:	d10b      	bne.n	8004a52 <vTaskStartScheduler+0xae>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	60fb      	str	r3, [r7, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <vTaskStartScheduler+0xaa>
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	08007500 	.word	0x08007500
 8004a60:	08005095 	.word	0x08005095
 8004a64:	20000d24 	.word	0x20000d24
 8004a68:	20000d20 	.word	0x20000d20
 8004a6c:	20000d0c 	.word	0x20000d0c
 8004a70:	20000d04 	.word	0x20000d04

08004a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a78:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <vTaskSuspendAll+0x18>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	4a03      	ldr	r2, [pc, #12]	@ (8004a8c <vTaskSuspendAll+0x18>)
 8004a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a82:	bf00      	nop
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000d28 	.word	0x20000d28

08004a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ba8 <xTaskResumeAll+0x118>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <xTaskResumeAll+0x2e>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	603b      	str	r3, [r7, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004abe:	f001 f92b 	bl	8005d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ac2:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <xTaskResumeAll+0x118>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4a37      	ldr	r2, [pc, #220]	@ (8004ba8 <xTaskResumeAll+0x118>)
 8004aca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004acc:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <xTaskResumeAll+0x118>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d162      	bne.n	8004b9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ad4:	4b35      	ldr	r3, [pc, #212]	@ (8004bac <xTaskResumeAll+0x11c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05e      	beq.n	8004b9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004adc:	e02f      	b.n	8004b3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ade:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <xTaskResumeAll+0x120>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f85a 	bl	8003ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f855 	bl	8003ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afe:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb4 <xTaskResumeAll+0x124>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d903      	bls.n	8004b0e <xTaskResumeAll+0x7e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb4 <xTaskResumeAll+0x124>)
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4a27      	ldr	r2, [pc, #156]	@ (8004bb8 <xTaskResumeAll+0x128>)
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fe ffe0 	bl	8003aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2e:	4b23      	ldr	r3, [pc, #140]	@ (8004bbc <xTaskResumeAll+0x12c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <xTaskResumeAll+0x130>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb0 <xTaskResumeAll+0x120>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1cb      	bne.n	8004ade <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b4c:	f000 fb58 	bl	8005200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b50:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc4 <xTaskResumeAll+0x134>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b5c:	f000 f846 	bl	8004bec <xTaskIncrementTick>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b66:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <xTaskResumeAll+0x130>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f1      	bne.n	8004b5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <xTaskResumeAll+0x134>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b7e:	4b10      	ldr	r3, [pc, #64]	@ (8004bc0 <xTaskResumeAll+0x130>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <xTaskResumeAll+0x138>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b9a:	f001 f8ef 	bl	8005d7c <vPortExitCritical>

	return xAlreadyYielded;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000d28 	.word	0x20000d28
 8004bac:	20000d00 	.word	0x20000d00
 8004bb0:	20000cc0 	.word	0x20000cc0
 8004bb4:	20000d08 	.word	0x20000d08
 8004bb8:	20000830 	.word	0x20000830
 8004bbc:	2000082c 	.word	0x2000082c
 8004bc0:	20000d14 	.word	0x20000d14
 8004bc4:	20000d10 	.word	0x20000d10
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <xTaskGetTickCount+0x1c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004bd8:	687b      	ldr	r3, [r7, #4]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000d04 	.word	0x20000d04

08004bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d34 <xTaskIncrementTick+0x148>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8090 	bne.w	8004d20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c00:	4b4d      	ldr	r3, [pc, #308]	@ (8004d38 <xTaskIncrementTick+0x14c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c08:	4a4b      	ldr	r2, [pc, #300]	@ (8004d38 <xTaskIncrementTick+0x14c>)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d121      	bne.n	8004c58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c14:	4b49      	ldr	r3, [pc, #292]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	603b      	str	r3, [r7, #0]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <xTaskIncrementTick+0x46>
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a3e      	ldr	r2, [pc, #248]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4a3e      	ldr	r2, [pc, #248]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d44 <xTaskIncrementTick+0x158>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a3c      	ldr	r2, [pc, #240]	@ (8004d44 <xTaskIncrementTick+0x158>)
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	f000 fad4 	bl	8005200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c58:	4b3b      	ldr	r3, [pc, #236]	@ (8004d48 <xTaskIncrementTick+0x15c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d349      	bcc.n	8004cf6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c62:	4b36      	ldr	r3, [pc, #216]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6c:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <xTaskIncrementTick+0x15c>)
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c72:	601a      	str	r2, [r3, #0]
					break;
 8004c74:	e03f      	b.n	8004cf6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c76:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d203      	bcs.n	8004c96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <xTaskIncrementTick+0x15c>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c94:	e02f      	b.n	8004cf6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe ff82 	bl	8003ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	3318      	adds	r3, #24
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe ff79 	bl	8003ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb6:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <xTaskIncrementTick+0x160>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d903      	bls.n	8004cc6 <xTaskIncrementTick+0xda>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <xTaskIncrementTick+0x160>)
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <xTaskIncrementTick+0x164>)
 8004cd4:	441a      	add	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f7fe ff04 	bl	8003aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <xTaskIncrementTick+0x168>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3b8      	bcc.n	8004c62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf4:	e7b5      	b.n	8004c62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf6:	4b17      	ldr	r3, [pc, #92]	@ (8004d54 <xTaskIncrementTick+0x168>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfc:	4914      	ldr	r1, [pc, #80]	@ (8004d50 <xTaskIncrementTick+0x164>)
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d901      	bls.n	8004d12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d12:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <xTaskIncrementTick+0x16c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e004      	b.n	8004d2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d20:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <xTaskIncrementTick+0x170>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	4a0d      	ldr	r2, [pc, #52]	@ (8004d5c <xTaskIncrementTick+0x170>)
 8004d28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000d28 	.word	0x20000d28
 8004d38:	20000d04 	.word	0x20000d04
 8004d3c:	20000cb8 	.word	0x20000cb8
 8004d40:	20000cbc 	.word	0x20000cbc
 8004d44:	20000d18 	.word	0x20000d18
 8004d48:	20000d20 	.word	0x20000d20
 8004d4c:	20000d08 	.word	0x20000d08
 8004d50:	20000830 	.word	0x20000830
 8004d54:	2000082c 	.word	0x2000082c
 8004d58:	20000d14 	.word	0x20000d14
 8004d5c:	20000d10 	.word	0x20000d10

08004d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d66:	4b28      	ldr	r3, [pc, #160]	@ (8004e08 <vTaskSwitchContext+0xa8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d6e:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <vTaskSwitchContext+0xac>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d74:	e042      	b.n	8004dfc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004d76:	4b25      	ldr	r3, [pc, #148]	@ (8004e0c <vTaskSwitchContext+0xac>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <vTaskSwitchContext+0xb0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e011      	b.n	8004da8 <vTaskSwitchContext+0x48>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vTaskSwitchContext+0x3e>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	491a      	ldr	r1, [pc, #104]	@ (8004e14 <vTaskSwitchContext+0xb4>)
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0e3      	beq.n	8004d84 <vTaskSwitchContext+0x24>
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4a13      	ldr	r2, [pc, #76]	@ (8004e14 <vTaskSwitchContext+0xb4>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d104      	bne.n	8004dec <vTaskSwitchContext+0x8c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4a09      	ldr	r2, [pc, #36]	@ (8004e18 <vTaskSwitchContext+0xb8>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4a06      	ldr	r2, [pc, #24]	@ (8004e10 <vTaskSwitchContext+0xb0>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000d28 	.word	0x20000d28
 8004e0c:	20000d14 	.word	0x20000d14
 8004e10:	20000d08 	.word	0x20000d08
 8004e14:	20000830 	.word	0x20000830
 8004e18:	2000082c 	.word	0x2000082c

08004e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <vTaskPlaceOnEventList+0x48>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fe fe70 	bl	8003b32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e52:	2101      	movs	r1, #1
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f000 fa81 	bl	800535c <prvAddCurrentTaskToDelayedList>
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	2000082c 	.word	0x2000082c

08004e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	617b      	str	r3, [r7, #20]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3318      	adds	r3, #24
 8004e98:	4619      	mov	r1, r3
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7fe fe25 	bl	8003aea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004eaa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f000 fa54 	bl	800535c <prvAddCurrentTaskToDelayedList>
	}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	2000082c 	.word	0x2000082c

08004ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fe56 	bl	8003ba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <xTaskRemoveFromEventList+0xb0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11d      	bne.n	8004f3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fe4d 	bl	8003ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <xTaskRemoveFromEventList+0xb4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d903      	bls.n	8004f1e <xTaskRemoveFromEventList+0x5e>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <xTaskRemoveFromEventList+0xb4>)
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <xTaskRemoveFromEventList+0xb8>)
 8004f2c:	441a      	add	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f7fe fdd8 	bl	8003aea <vListInsertEnd>
 8004f3a:	e005      	b.n	8004f48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3318      	adds	r3, #24
 8004f40:	4619      	mov	r1, r3
 8004f42:	480e      	ldr	r0, [pc, #56]	@ (8004f7c <xTaskRemoveFromEventList+0xbc>)
 8004f44:	f7fe fdd1 	bl	8003aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <xTaskRemoveFromEventList+0xc0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d905      	bls.n	8004f62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <xTaskRemoveFromEventList+0xc4>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e001      	b.n	8004f66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f66:	697b      	ldr	r3, [r7, #20]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000d28 	.word	0x20000d28
 8004f74:	20000d08 	.word	0x20000d08
 8004f78:	20000830 	.word	0x20000830
 8004f7c:	20000cc0 	.word	0x20000cc0
 8004f80:	2000082c 	.word	0x2000082c
 8004f84:	20000d14 	.word	0x20000d14

08004f88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <vTaskInternalSetTimeOutState+0x24>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <vTaskInternalSetTimeOutState+0x28>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	605a      	str	r2, [r3, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000d18 	.word	0x20000d18
 8004fb0:	20000d04 	.word	0x20000d04

08004fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	613b      	str	r3, [r7, #16]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60fb      	str	r3, [r7, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ffa:	f000 fe8d 	bl	8005d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <xTaskCheckForTimeOut+0xc0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005016:	d102      	bne.n	800501e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e023      	b.n	8005066 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <xTaskCheckForTimeOut+0xc4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d007      	beq.n	800503a <xTaskCheckForTimeOut+0x86>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	429a      	cmp	r2, r3
 8005032:	d302      	bcc.n	800503a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e015      	b.n	8005066 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	429a      	cmp	r2, r3
 8005042:	d20b      	bcs.n	800505c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff ff99 	bl	8004f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e004      	b.n	8005066 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005062:	2301      	movs	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005066:	f000 fe89 	bl	8005d7c <vPortExitCritical>

	return xReturn;
 800506a:	69fb      	ldr	r3, [r7, #28]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000d04 	.word	0x20000d04
 8005078:	20000d18 	.word	0x20000d18

0800507c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005080:	4b03      	ldr	r3, [pc, #12]	@ (8005090 <vTaskMissedYield+0x14>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000d14 	.word	0x20000d14

08005094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800509c:	f000 f852 	bl	8005144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050a0:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <prvIdleTask+0x28>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d9f9      	bls.n	800509c <prvIdleTask+0x8>
			{
				taskYIELD();
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <prvIdleTask+0x2c>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050b8:	e7f0      	b.n	800509c <prvIdleTask+0x8>
 80050ba:	bf00      	nop
 80050bc:	20000830 	.word	0x20000830
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	e00c      	b.n	80050ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4a12      	ldr	r2, [pc, #72]	@ (8005124 <prvInitialiseTaskLists+0x60>)
 80050dc:	4413      	add	r3, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fcd6 	bl	8003a90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3301      	adds	r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b37      	cmp	r3, #55	@ 0x37
 80050ee:	d9ef      	bls.n	80050d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050f0:	480d      	ldr	r0, [pc, #52]	@ (8005128 <prvInitialiseTaskLists+0x64>)
 80050f2:	f7fe fccd 	bl	8003a90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050f6:	480d      	ldr	r0, [pc, #52]	@ (800512c <prvInitialiseTaskLists+0x68>)
 80050f8:	f7fe fcca 	bl	8003a90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050fc:	480c      	ldr	r0, [pc, #48]	@ (8005130 <prvInitialiseTaskLists+0x6c>)
 80050fe:	f7fe fcc7 	bl	8003a90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005102:	480c      	ldr	r0, [pc, #48]	@ (8005134 <prvInitialiseTaskLists+0x70>)
 8005104:	f7fe fcc4 	bl	8003a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005108:	480b      	ldr	r0, [pc, #44]	@ (8005138 <prvInitialiseTaskLists+0x74>)
 800510a:	f7fe fcc1 	bl	8003a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <prvInitialiseTaskLists+0x78>)
 8005110:	4a05      	ldr	r2, [pc, #20]	@ (8005128 <prvInitialiseTaskLists+0x64>)
 8005112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005114:	4b0a      	ldr	r3, [pc, #40]	@ (8005140 <prvInitialiseTaskLists+0x7c>)
 8005116:	4a05      	ldr	r2, [pc, #20]	@ (800512c <prvInitialiseTaskLists+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000830 	.word	0x20000830
 8005128:	20000c90 	.word	0x20000c90
 800512c:	20000ca4 	.word	0x20000ca4
 8005130:	20000cc0 	.word	0x20000cc0
 8005134:	20000cd4 	.word	0x20000cd4
 8005138:	20000cec 	.word	0x20000cec
 800513c:	20000cb8 	.word	0x20000cb8
 8005140:	20000cbc 	.word	0x20000cbc

08005144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800514a:	e019      	b.n	8005180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800514c:	f000 fde4 	bl	8005d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <prvCheckTasksWaitingTermination+0x50>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe fd21 	bl	8003ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <prvCheckTasksWaitingTermination+0x54>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3b01      	subs	r3, #1
 8005168:	4a0b      	ldr	r2, [pc, #44]	@ (8005198 <prvCheckTasksWaitingTermination+0x54>)
 800516a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800516c:	4b0b      	ldr	r3, [pc, #44]	@ (800519c <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	4a0a      	ldr	r2, [pc, #40]	@ (800519c <prvCheckTasksWaitingTermination+0x58>)
 8005174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005176:	f000 fe01 	bl	8005d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f810 	bl	80051a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <prvCheckTasksWaitingTermination+0x58>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e1      	bne.n	800514c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000cd4 	.word	0x20000cd4
 8005198:	20000d00 	.word	0x20000d00
 800519c:	20000ce8 	.word	0x20000ce8

080051a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d108      	bne.n	80051c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff9e 	bl	80060f8 <vPortFree>
				vPortFree( pxTCB );
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 ff9b 	bl	80060f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051c2:	e019      	b.n	80051f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d103      	bne.n	80051d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 ff92 	bl	80060f8 <vPortFree>
	}
 80051d4:	e010      	b.n	80051f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d00b      	beq.n	80051f8 <prvDeleteTCB+0x58>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <prvDeleteTCB+0x54>
	}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005206:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <prvResetNextTaskUnblockTime+0x38>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005210:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <prvResetNextTaskUnblockTime+0x3c>)
 8005212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005216:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005218:	e008      	b.n	800522c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521a:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <prvResetNextTaskUnblockTime+0x38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a04      	ldr	r2, [pc, #16]	@ (800523c <prvResetNextTaskUnblockTime+0x3c>)
 800522a:	6013      	str	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20000cb8 	.word	0x20000cb8
 800523c:	20000d20 	.word	0x20000d20

08005240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005246:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <xTaskGetSchedulerState+0x34>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800524e:	2301      	movs	r3, #1
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	e008      	b.n	8005266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005254:	4b08      	ldr	r3, [pc, #32]	@ (8005278 <xTaskGetSchedulerState+0x38>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800525c:	2302      	movs	r3, #2
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	e001      	b.n	8005266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005266:	687b      	ldr	r3, [r7, #4]
	}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20000d0c 	.word	0x20000d0c
 8005278:	20000d28 	.word	0x20000d28

0800527c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d058      	beq.n	8005344 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005292:	4b2f      	ldr	r3, [pc, #188]	@ (8005350 <xTaskPriorityDisinherit+0xd4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	429a      	cmp	r2, r3
 800529a:	d00b      	beq.n	80052b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60fb      	str	r3, [r7, #12]
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60bb      	str	r3, [r7, #8]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d02c      	beq.n	8005344 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d128      	bne.n	8005344 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fc54 	bl	8003ba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005314:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <xTaskPriorityDisinherit+0xd8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d903      	bls.n	8005324 <xTaskPriorityDisinherit+0xa8>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005320:	4a0c      	ldr	r2, [pc, #48]	@ (8005354 <xTaskPriorityDisinherit+0xd8>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <xTaskPriorityDisinherit+0xdc>)
 8005332:	441a      	add	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe fbd5 	bl	8003aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005344:	697b      	ldr	r3, [r7, #20]
	}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2000082c 	.word	0x2000082c
 8005354:	20000d08 	.word	0x20000d08
 8005358:	20000830 	.word	0x20000830

0800535c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005366:	4b21      	ldr	r3, [pc, #132]	@ (80053ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536c:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fc16 	bl	8003ba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800537e:	d10a      	bne.n	8005396 <prvAddCurrentTaskToDelayedList+0x3a>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4819      	ldr	r0, [pc, #100]	@ (80053f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005390:	f7fe fbab 	bl	8003aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005394:	e026      	b.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d209      	bcs.n	80053c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ae:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fe fbb9 	bl	8003b32 <vListInsert>
}
 80053c0:	e010      	b.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c2:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7fe fbaf 	bl	8003b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d202      	bcs.n	80053e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053de:	4a08      	ldr	r2, [pc, #32]	@ (8005400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000d04 	.word	0x20000d04
 80053f0:	2000082c 	.word	0x2000082c
 80053f4:	20000cec 	.word	0x20000cec
 80053f8:	20000cbc 	.word	0x20000cbc
 80053fc:	20000cb8 	.word	0x20000cb8
 8005400:	20000d20 	.word	0x20000d20

08005404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	@ 0x28
 8005408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800540e:	f000 fb13 	bl	8005a38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <xTimerCreateTimerTask+0x84>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d021      	beq.n	800545e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	f107 0108 	add.w	r1, r7, #8
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fb15 	bl	8003a5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	9202      	str	r2, [sp, #8]
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	2302      	movs	r3, #2
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	460a      	mov	r2, r1
 8005444:	4911      	ldr	r1, [pc, #68]	@ (800548c <xTimerCreateTimerTask+0x88>)
 8005446:	4812      	ldr	r0, [pc, #72]	@ (8005490 <xTimerCreateTimerTask+0x8c>)
 8005448:	f7ff f8d0 	bl	80045ec <xTaskCreateStatic>
 800544c:	4603      	mov	r3, r0
 800544e:	4a11      	ldr	r2, [pc, #68]	@ (8005494 <xTimerCreateTimerTask+0x90>)
 8005450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005452:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <xTimerCreateTimerTask+0x90>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800545a:	2301      	movs	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	613b      	str	r3, [r7, #16]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800547c:	697b      	ldr	r3, [r7, #20]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000d5c 	.word	0x20000d5c
 800548c:	08007508 	.word	0x08007508
 8005490:	080055d1 	.word	0x080055d1
 8005494:	20000d60 	.word	0x20000d60

08005498 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	623b      	str	r3, [r7, #32]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <xTimerGenericCommand+0x98>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02a      	beq.n	8005526 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	dc18      	bgt.n	8005514 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054e2:	f7ff fead 	bl	8005240 <xTaskGetSchedulerState>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d109      	bne.n	8005500 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054ec:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <xTimerGenericCommand+0x98>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	f107 0110 	add.w	r1, r7, #16
 80054f4:	2300      	movs	r3, #0
 80054f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f8:	f7fe fc88 	bl	8003e0c <xQueueGenericSend>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80054fe:	e012      	b.n	8005526 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <xTimerGenericCommand+0x98>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	f107 0110 	add.w	r1, r7, #16
 8005508:	2300      	movs	r3, #0
 800550a:	2200      	movs	r2, #0
 800550c:	f7fe fc7e 	bl	8003e0c <xQueueGenericSend>
 8005510:	6278      	str	r0, [r7, #36]	@ 0x24
 8005512:	e008      	b.n	8005526 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005514:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <xTimerGenericCommand+0x98>)
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	f107 0110 	add.w	r1, r7, #16
 800551c:	2300      	movs	r3, #0
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	f7fe fd76 	bl	8004010 <xQueueGenericSendFromISR>
 8005524:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	@ 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000d5c 	.word	0x20000d5c

08005534 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553e:	4b23      	ldr	r3, [pc, #140]	@ (80055cc <prvProcessExpiredTimer+0x98>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fb29 	bl	8003ba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	18d1      	adds	r1, r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	6978      	ldr	r0, [r7, #20]
 800556e:	f000 f8d5 	bl	800571c <prvInsertTimerInActiveList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d020      	beq.n	80055ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	2100      	movs	r1, #0
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff88 	bl	8005498 <xTimerGenericCommand>
 8005588:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d114      	bne.n	80055ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	6978      	ldr	r0, [r7, #20]
 80055c0:	4798      	blx	r3
}
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000d54 	.word	0x20000d54

080055d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f859 	bl	8005694 <prvGetNextExpireTime>
 80055e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f805 	bl	80055f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055ee:	f000 f8d7 	bl	80057a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055f2:	bf00      	nop
 80055f4:	e7f0      	b.n	80055d8 <prvTimerTask+0x8>
	...

080055f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005602:	f7ff fa37 	bl	8004a74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f866 	bl	80056dc <prvSampleTimeNow>
 8005610:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d130      	bne.n	800567a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <prvProcessTimerOrBlockTask+0x3c>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d806      	bhi.n	8005634 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005626:	f7ff fa33 	bl	8004a90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ff81 	bl	8005534 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005632:	e024      	b.n	800567e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <prvProcessTimerOrBlockTask+0x90>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <prvProcessTimerOrBlockTask+0x50>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <prvProcessTimerOrBlockTask+0x52>
 8005648:	2300      	movs	r3, #0
 800564a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800564c:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <prvProcessTimerOrBlockTask+0x94>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	f7fe ff93 	bl	8004584 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f7ff fa17 	bl	8004a90 <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005668:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <prvProcessTimerOrBlockTask+0x98>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
}
 8005678:	e001      	b.n	800567e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800567a:	f7ff fa09 	bl	8004a90 <xTaskResumeAll>
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000d58 	.word	0x20000d58
 800568c:	20000d5c 	.word	0x20000d5c
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800569c:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <prvGetNextExpireTime+0x44>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <prvGetNextExpireTime+0x16>
 80056a6:	2201      	movs	r2, #1
 80056a8:	e000      	b.n	80056ac <prvGetNextExpireTime+0x18>
 80056aa:	2200      	movs	r2, #0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <prvGetNextExpireTime+0x44>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e001      	b.n	80056c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000d54 	.word	0x20000d54

080056dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056e4:	f7ff fa72 	bl	8004bcc <xTaskGetTickCount>
 80056e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <prvSampleTimeNow+0x3c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d205      	bcs.n	8005700 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056f4:	f000 f93a 	bl	800596c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e002      	b.n	8005706 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005706:	4a04      	ldr	r2, [pc, #16]	@ (8005718 <prvSampleTimeNow+0x3c>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000d64 	.word	0x20000d64

0800571c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d812      	bhi.n	8005768 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e01b      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <prvInsertTimerInActiveList+0x7c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe f9e6 	bl	8003b32 <vListInsert>
 8005766:	e012      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d206      	bcs.n	800577e <prvInsertTimerInActiveList+0x62>
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d302      	bcc.n	800577e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e007      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <prvInsertTimerInActiveList+0x80>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fe f9d2 	bl	8003b32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000d58 	.word	0x20000d58
 800579c:	20000d54 	.word	0x20000d54

080057a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	@ 0x38
 80057a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057a6:	e0ce      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da19      	bge.n	80057e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	3304      	adds	r3, #4
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d8:	6850      	ldr	r0, [r2, #4]
 80057da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	4611      	mov	r1, r2
 80057e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f2c0 80ae 	blt.w	8005946 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f9d2 	bl	8003ba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005800:	463b      	mov	r3, r7
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff6a 	bl	80056dc <prvSampleTimeNow>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b09      	cmp	r3, #9
 800580e:	f200 8097 	bhi.w	8005940 <prvProcessReceivedCommands+0x1a0>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <prvProcessReceivedCommands+0x78>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005841 	.word	0x08005841
 800581c:	08005841 	.word	0x08005841
 8005820:	08005841 	.word	0x08005841
 8005824:	080058b7 	.word	0x080058b7
 8005828:	080058cb 	.word	0x080058cb
 800582c:	08005917 	.word	0x08005917
 8005830:	08005841 	.word	0x08005841
 8005834:	08005841 	.word	0x08005841
 8005838:	080058b7 	.word	0x080058b7
 800583c:	080058cb 	.word	0x080058cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	18d1      	adds	r1, r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005860:	f7ff ff5c 	bl	800571c <prvInsertTimerInActiveList>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d06c      	beq.n	8005944 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005870:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d061      	beq.n	8005944 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	441a      	add	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2300      	movs	r3, #0
 800588e:	2100      	movs	r1, #0
 8005890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005892:	f7ff fe01 	bl	8005498 <xTimerGenericCommand>
 8005896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d152      	bne.n	8005944 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61bb      	str	r3, [r7, #24]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058c8:	e03d      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	617b      	str	r3, [r7, #20]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	18d1      	adds	r1, r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f7ff ff04 	bl	800571c <prvInsertTimerInActiveList>
					break;
 8005914:	e017      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005926:	f000 fbe7 	bl	80060f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800592a:	e00c      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800593e:	e002      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <prvProcessReceivedCommands+0x1a6>
					break;
 8005944:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005946:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <prvProcessReceivedCommands+0x1c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	1d39      	adds	r1, r7, #4
 800594c:	2200      	movs	r2, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fbfc 	bl	800414c <xQueueReceive>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	f47f af26 	bne.w	80057a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3730      	adds	r7, #48	@ 0x30
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000d5c 	.word	0x20000d5c

0800596c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005972:	e049      	b.n	8005a08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005974:	4b2e      	ldr	r3, [pc, #184]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe f909 	bl	8003ba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02f      	beq.n	8005a08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d90e      	bls.n	80059d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fe f8ae 	bl	8003b32 <vListInsert>
 80059d6:	e017      	b.n	8005a08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059d8:	2300      	movs	r3, #0
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	2100      	movs	r1, #0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fd58 	bl	8005498 <xTimerGenericCommand>
 80059e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10b      	bne.n	8005a08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	603b      	str	r3, [r7, #0]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a08:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1b0      	bne.n	8005974 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a12:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <prvSwitchTimerLists+0xc8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a04      	ldr	r2, [pc, #16]	@ (8005a30 <prvSwitchTimerLists+0xc4>)
 8005a1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a20:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <prvSwitchTimerLists+0xc8>)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6013      	str	r3, [r2, #0]
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000d54 	.word	0x20000d54
 8005a34:	20000d58 	.word	0x20000d58

08005a38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a3e:	f000 f96b 	bl	8005d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a42:	4b15      	ldr	r3, [pc, #84]	@ (8005a98 <prvCheckForValidListAndQueue+0x60>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d120      	bne.n	8005a8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a4a:	4814      	ldr	r0, [pc, #80]	@ (8005a9c <prvCheckForValidListAndQueue+0x64>)
 8005a4c:	f7fe f820 	bl	8003a90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a50:	4813      	ldr	r0, [pc, #76]	@ (8005aa0 <prvCheckForValidListAndQueue+0x68>)
 8005a52:	f7fe f81d 	bl	8003a90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a56:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <prvCheckForValidListAndQueue+0x6c>)
 8005a58:	4a10      	ldr	r2, [pc, #64]	@ (8005a9c <prvCheckForValidListAndQueue+0x64>)
 8005a5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a5c:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <prvCheckForValidListAndQueue+0x70>)
 8005a5e:	4a10      	ldr	r2, [pc, #64]	@ (8005aa0 <prvCheckForValidListAndQueue+0x68>)
 8005a60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <prvCheckForValidListAndQueue+0x74>)
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <prvCheckForValidListAndQueue+0x78>)
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	f7fe f92d 	bl	8003ccc <xQueueGenericCreateStatic>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <prvCheckForValidListAndQueue+0x60>)
 8005a76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a78:	4b07      	ldr	r3, [pc, #28]	@ (8005a98 <prvCheckForValidListAndQueue+0x60>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a80:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <prvCheckForValidListAndQueue+0x60>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	490b      	ldr	r1, [pc, #44]	@ (8005ab4 <prvCheckForValidListAndQueue+0x7c>)
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fd52 	bl	8004530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a8c:	f000 f976 	bl	8005d7c <vPortExitCritical>
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000d5c 	.word	0x20000d5c
 8005a9c:	20000d2c 	.word	0x20000d2c
 8005aa0:	20000d40 	.word	0x20000d40
 8005aa4:	20000d54 	.word	0x20000d54
 8005aa8:	20000d58 	.word	0x20000d58
 8005aac:	20000e08 	.word	0x20000e08
 8005ab0:	20000d68 	.word	0x20000d68
 8005ab4:	08007510 	.word	0x08007510

08005ab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b04      	subs	r3, #4
 8005ac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0201 	bic.w	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3b04      	subs	r3, #4
 8005ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8005b1c <pxPortInitialiseStack+0x64>)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b14      	subs	r3, #20
 8005af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b04      	subs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f06f 0202 	mvn.w	r2, #2
 8005b06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b20      	subs	r3, #32
 8005b0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	08005b21 	.word	0x08005b21

08005b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b2a:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <prvTaskExitError+0x58>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b32:	d00b      	beq.n	8005b4c <prvTaskExitError+0x2c>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <prvTaskExitError+0x28>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
}
 8005b5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b60:	bf00      	nop
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0fc      	beq.n	8005b62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	00000000 	.word	0x00000000

08005b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b80:	4b07      	ldr	r3, [pc, #28]	@ (8005ba0 <pxCurrentTCBConst2>)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	6808      	ldr	r0, [r1, #0]
 8005b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8a:	f380 8809 	msr	PSP, r0
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8811 	msr	BASEPRI, r0
 8005b9a:	4770      	bx	lr
 8005b9c:	f3af 8000 	nop.w

08005ba0 <pxCurrentTCBConst2>:
 8005ba0:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop

08005ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ba8:	4808      	ldr	r0, [pc, #32]	@ (8005bcc <prvPortStartFirstTask+0x24>)
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	6800      	ldr	r0, [r0, #0]
 8005bae:	f380 8808 	msr	MSP, r0
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f380 8814 	msr	CONTROL, r0
 8005bba:	b662      	cpsie	i
 8005bbc:	b661      	cpsie	f
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	df00      	svc	0
 8005bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bca:	bf00      	nop
 8005bcc:	e000ed08 	.word	0xe000ed08

08005bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bd6:	4b47      	ldr	r3, [pc, #284]	@ (8005cf4 <xPortStartScheduler+0x124>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a47      	ldr	r2, [pc, #284]	@ (8005cf8 <xPortStartScheduler+0x128>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10b      	bne.n	8005bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf4 <xPortStartScheduler+0x124>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8005cfc <xPortStartScheduler+0x12c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d10b      	bne.n	8005c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	613b      	str	r3, [r7, #16]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c1a:	4b39      	ldr	r3, [pc, #228]	@ (8005d00 <xPortStartScheduler+0x130>)
 8005c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	22ff      	movs	r2, #255	@ 0xff
 8005c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	4b31      	ldr	r3, [pc, #196]	@ (8005d04 <xPortStartScheduler+0x134>)
 8005c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c42:	4b31      	ldr	r3, [pc, #196]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c44:	2207      	movs	r2, #7
 8005c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c48:	e009      	b.n	8005c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	d0ef      	beq.n	8005c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c6a:	4b27      	ldr	r3, [pc, #156]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1c3 0307 	rsb	r3, r3, #7
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d00b      	beq.n	8005c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	60bb      	str	r3, [r7, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	e7fd      	b.n	8005c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	4a1c      	ldr	r2, [pc, #112]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c98:	4b1b      	ldr	r3, [pc, #108]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ca0:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <xPortStartScheduler+0x138>)
 8005ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cac:	4b17      	ldr	r3, [pc, #92]	@ (8005d0c <xPortStartScheduler+0x13c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	@ (8005d0c <xPortStartScheduler+0x13c>)
 8005cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cb8:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <xPortStartScheduler+0x13c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <xPortStartScheduler+0x13c>)
 8005cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cc4:	f000 f8da 	bl	8005e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <xPortStartScheduler+0x140>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cce:	f000 f8f9 	bl	8005ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <xPortStartScheduler+0x144>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005d14 <xPortStartScheduler+0x144>)
 8005cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cde:	f7ff ff63 	bl	8005ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ce2:	f7ff f83d 	bl	8004d60 <vTaskSwitchContext>
	prvTaskExitError();
 8005ce6:	f7ff ff1b 	bl	8005b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	e000ed00 	.word	0xe000ed00
 8005cf8:	410fc271 	.word	0x410fc271
 8005cfc:	410fc270 	.word	0x410fc270
 8005d00:	e000e400 	.word	0xe000e400
 8005d04:	20000e58 	.word	0x20000e58
 8005d08:	20000e5c 	.word	0x20000e5c
 8005d0c:	e000ed20 	.word	0xe000ed20
 8005d10:	2000000c 	.word	0x2000000c
 8005d14:	e000ef34 	.word	0xe000ef34

08005d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
}
 8005d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d32:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <vPortEnterCritical+0x5c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	4a0e      	ldr	r2, [pc, #56]	@ (8005d74 <vPortEnterCritical+0x5c>)
 8005d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <vPortEnterCritical+0x5c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d110      	bne.n	8005d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d44:	4b0c      	ldr	r3, [pc, #48]	@ (8005d78 <vPortEnterCritical+0x60>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	603b      	str	r3, [r7, #0]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <vPortEnterCritical+0x4a>
	}
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	2000000c 	.word	0x2000000c
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d82:	4b12      	ldr	r3, [pc, #72]	@ (8005dcc <vPortExitCritical+0x50>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <vPortExitCritical+0x26>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005da2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <vPortExitCritical+0x50>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4a08      	ldr	r2, [pc, #32]	@ (8005dcc <vPortExitCritical+0x50>)
 8005daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dac:	4b07      	ldr	r3, [pc, #28]	@ (8005dcc <vPortExitCritical+0x50>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <vPortExitCritical+0x44>
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000000c 	.word	0x2000000c

08005dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005dd0:	f3ef 8009 	mrs	r0, PSP
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <pxCurrentTCBConst>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	f01e 0f10 	tst.w	lr, #16
 8005de0:	bf08      	it	eq
 8005de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005df4:	f380 8811 	msr	BASEPRI, r0
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f7fe ffae 	bl	8004d60 <vTaskSwitchContext>
 8005e04:	f04f 0000 	mov.w	r0, #0
 8005e08:	f380 8811 	msr	BASEPRI, r0
 8005e0c:	bc09      	pop	{r0, r3}
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	6808      	ldr	r0, [r1, #0]
 8005e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e16:	f01e 0f10 	tst.w	lr, #16
 8005e1a:	bf08      	it	eq
 8005e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e20:	f380 8809 	msr	PSP, r0
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst>:
 8005e30:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e52:	f7fe fecb 	bl	8004bec <xTaskIncrementTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <xPortSysTickHandler+0x40>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e80:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <vPortSetupTimerInterrupt+0x38>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <vPortSetupTimerInterrupt+0x3c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0a      	ldr	r2, [pc, #40]	@ (8005ebc <vPortSetupTimerInterrupt+0x40>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	4a09      	ldr	r2, [pc, #36]	@ (8005ec0 <vPortSetupTimerInterrupt+0x44>)
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e9e:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010
 8005eb4:	e000e018 	.word	0xe000e018
 8005eb8:	20000000 	.word	0x20000000
 8005ebc:	10624dd3 	.word	0x10624dd3
 8005ec0:	e000e014 	.word	0xe000e014

08005ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ed4 <vPortEnableVFP+0x10>
 8005ec8:	6801      	ldr	r1, [r0, #0]
 8005eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ece:	6001      	str	r1, [r0, #0]
 8005ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ed2:	bf00      	nop
 8005ed4:	e000ed88 	.word	0xe000ed88

08005ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ede:	f3ef 8305 	mrs	r3, IPSR
 8005ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d915      	bls.n	8005f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <vPortValidateInterruptPriority+0x74>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ef4:	4b16      	ldr	r3, [pc, #88]	@ (8005f50 <vPortValidateInterruptPriority+0x78>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	7afa      	ldrb	r2, [r7, #11]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d20b      	bcs.n	8005f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f16:	4b0f      	ldr	r3, [pc, #60]	@ (8005f54 <vPortValidateInterruptPriority+0x7c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f58 <vPortValidateInterruptPriority+0x80>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d90b      	bls.n	8005f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	603b      	str	r3, [r7, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <vPortValidateInterruptPriority+0x62>
	}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	e000e3f0 	.word	0xe000e3f0
 8005f50:	20000e58 	.word	0x20000e58
 8005f54:	e000ed0c 	.word	0xe000ed0c
 8005f58:	20000e5c 	.word	0x20000e5c

08005f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	@ 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f68:	f7fe fd84 	bl	8004a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80060e0 <pvPortMalloc+0x184>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f74:	f000 f924 	bl	80061c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f78:	4b5a      	ldr	r3, [pc, #360]	@ (80060e4 <pvPortMalloc+0x188>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 8095 	bne.w	80060b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01e      	beq.n	8005fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d015      	beq.n	8005fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <pvPortMalloc+0x6e>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	617b      	str	r3, [r7, #20]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d06f      	beq.n	80060b0 <pvPortMalloc+0x154>
 8005fd0:	4b45      	ldr	r3, [pc, #276]	@ (80060e8 <pvPortMalloc+0x18c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d86a      	bhi.n	80060b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fda:	4b44      	ldr	r3, [pc, #272]	@ (80060ec <pvPortMalloc+0x190>)
 8005fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fde:	4b43      	ldr	r3, [pc, #268]	@ (80060ec <pvPortMalloc+0x190>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe4:	e004      	b.n	8005ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d903      	bls.n	8006002 <pvPortMalloc+0xa6>
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f1      	bne.n	8005fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006002:	4b37      	ldr	r3, [pc, #220]	@ (80060e0 <pvPortMalloc+0x184>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006008:	429a      	cmp	r2, r3
 800600a:	d051      	beq.n	80060b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2208      	movs	r2, #8
 8006012:	4413      	add	r3, r2
 8006014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	2308      	movs	r3, #8
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	429a      	cmp	r2, r3
 800602c:	d920      	bls.n	8006070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800602e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <pvPortMalloc+0xfc>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800606a:	69b8      	ldr	r0, [r7, #24]
 800606c:	f000 f90a 	bl	8006284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006070:	4b1d      	ldr	r3, [pc, #116]	@ (80060e8 <pvPortMalloc+0x18c>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <pvPortMalloc+0x18c>)
 800607c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800607e:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <pvPortMalloc+0x18c>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <pvPortMalloc+0x194>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d203      	bcs.n	8006092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800608a:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <pvPortMalloc+0x18c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <pvPortMalloc+0x194>)
 8006090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <pvPortMalloc+0x188>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	431a      	orrs	r2, r3
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060a6:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <pvPortMalloc+0x198>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3301      	adds	r3, #1
 80060ac:	4a11      	ldr	r2, [pc, #68]	@ (80060f4 <pvPortMalloc+0x198>)
 80060ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b0:	f7fe fcee 	bl	8004a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <pvPortMalloc+0x17a>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <pvPortMalloc+0x176>
	return pvReturn;
 80060d6:	69fb      	ldr	r3, [r7, #28]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3728      	adds	r7, #40	@ 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20004a68 	.word	0x20004a68
 80060e4:	20004a7c 	.word	0x20004a7c
 80060e8:	20004a6c 	.word	0x20004a6c
 80060ec:	20004a60 	.word	0x20004a60
 80060f0:	20004a70 	.word	0x20004a70
 80060f4:	20004a74 	.word	0x20004a74

080060f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d04f      	beq.n	80061aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800610a:	2308      	movs	r3, #8
 800610c:	425b      	negs	r3, r3
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <vPortFree+0xbc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10b      	bne.n	800613e <vPortFree+0x46>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <vPortFree+0x66>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60bb      	str	r3, [r7, #8]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	4b14      	ldr	r3, [pc, #80]	@ (80061b4 <vPortFree+0xbc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01e      	beq.n	80061aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11a      	bne.n	80061aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <vPortFree+0xbc>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006184:	f7fe fc76 	bl	8004a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <vPortFree+0xc0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4413      	add	r3, r2
 8006192:	4a09      	ldr	r2, [pc, #36]	@ (80061b8 <vPortFree+0xc0>)
 8006194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006196:	6938      	ldr	r0, [r7, #16]
 8006198:	f000 f874 	bl	8006284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <vPortFree+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	4a06      	ldr	r2, [pc, #24]	@ (80061bc <vPortFree+0xc4>)
 80061a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061a6:	f7fe fc73 	bl	8004a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20004a7c 	.word	0x20004a7c
 80061b8:	20004a6c 	.word	0x20004a6c
 80061bc:	20004a78 	.word	0x20004a78

080061c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80061ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061cc:	4b27      	ldr	r3, [pc, #156]	@ (800626c <prvHeapInit+0xac>)
 80061ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00c      	beq.n	80061f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3307      	adds	r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	4a1f      	ldr	r2, [pc, #124]	@ (800626c <prvHeapInit+0xac>)
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <prvHeapInit+0xb0>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006270 <prvHeapInit+0xb0>)
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800620c:	2208      	movs	r2, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <prvHeapInit+0xb4>)
 8006220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <prvHeapInit+0xb4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <prvHeapInit+0xb4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <prvHeapInit+0xb4>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <prvHeapInit+0xb8>)
 800624e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a09      	ldr	r2, [pc, #36]	@ (800627c <prvHeapInit+0xbc>)
 8006256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006258:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <prvHeapInit+0xc0>)
 800625a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800625e:	601a      	str	r2, [r3, #0]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20000e60 	.word	0x20000e60
 8006270:	20004a60 	.word	0x20004a60
 8006274:	20004a68 	.word	0x20004a68
 8006278:	20004a70 	.word	0x20004a70
 800627c:	20004a6c 	.word	0x20004a6c
 8006280:	20004a7c 	.word	0x20004a7c

08006284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <prvInsertBlockIntoFreeList+0xac>)
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e002      	b.n	8006298 <prvInsertBlockIntoFreeList+0x14>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d8f7      	bhi.n	8006292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d108      	bne.n	80062c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d118      	bne.n	800630c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b15      	ldr	r3, [pc, #84]	@ (8006334 <prvInsertBlockIntoFreeList+0xb0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d00d      	beq.n	8006302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e008      	b.n	8006314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006302:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <prvInsertBlockIntoFreeList+0xb0>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e003      	b.n	8006314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d002      	beq.n	8006322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20004a60 	.word	0x20004a60
 8006334:	20004a68 	.word	0x20004a68

08006338 <setbuf>:
 8006338:	fab1 f281 	clz	r2, r1
 800633c:	0952      	lsrs	r2, r2, #5
 800633e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006342:	0052      	lsls	r2, r2, #1
 8006344:	f000 b800 	b.w	8006348 <setvbuf>

08006348 <setvbuf>:
 8006348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800634c:	461d      	mov	r5, r3
 800634e:	4b57      	ldr	r3, [pc, #348]	@ (80064ac <setvbuf+0x164>)
 8006350:	681f      	ldr	r7, [r3, #0]
 8006352:	4604      	mov	r4, r0
 8006354:	460e      	mov	r6, r1
 8006356:	4690      	mov	r8, r2
 8006358:	b127      	cbz	r7, 8006364 <setvbuf+0x1c>
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	b913      	cbnz	r3, 8006364 <setvbuf+0x1c>
 800635e:	4638      	mov	r0, r7
 8006360:	f000 f932 	bl	80065c8 <__sinit>
 8006364:	f1b8 0f02 	cmp.w	r8, #2
 8006368:	d006      	beq.n	8006378 <setvbuf+0x30>
 800636a:	f1b8 0f01 	cmp.w	r8, #1
 800636e:	f200 809a 	bhi.w	80064a6 <setvbuf+0x15e>
 8006372:	2d00      	cmp	r5, #0
 8006374:	f2c0 8097 	blt.w	80064a6 <setvbuf+0x15e>
 8006378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800637a:	07d9      	lsls	r1, r3, #31
 800637c:	d405      	bmi.n	800638a <setvbuf+0x42>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	059a      	lsls	r2, r3, #22
 8006382:	d402      	bmi.n	800638a <setvbuf+0x42>
 8006384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006386:	f000 fa72 	bl	800686e <__retarget_lock_acquire_recursive>
 800638a:	4621      	mov	r1, r4
 800638c:	4638      	mov	r0, r7
 800638e:	f000 fed7 	bl	8007140 <_fflush_r>
 8006392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006394:	b141      	cbz	r1, 80063a8 <setvbuf+0x60>
 8006396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800639a:	4299      	cmp	r1, r3
 800639c:	d002      	beq.n	80063a4 <setvbuf+0x5c>
 800639e:	4638      	mov	r0, r7
 80063a0:	f000 fa88 	bl	80068b4 <_free_r>
 80063a4:	2300      	movs	r3, #0
 80063a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a8:	2300      	movs	r3, #0
 80063aa:	61a3      	str	r3, [r4, #24]
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	d503      	bpl.n	80063bc <setvbuf+0x74>
 80063b4:	6921      	ldr	r1, [r4, #16]
 80063b6:	4638      	mov	r0, r7
 80063b8:	f000 fa7c 	bl	80068b4 <_free_r>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	f1b8 0f02 	cmp.w	r8, #2
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	d061      	beq.n	8006492 <setvbuf+0x14a>
 80063ce:	ab01      	add	r3, sp, #4
 80063d0:	466a      	mov	r2, sp
 80063d2:	4621      	mov	r1, r4
 80063d4:	4638      	mov	r0, r7
 80063d6:	f000 f92d 	bl	8006634 <__swhatbuf_r>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	4318      	orrs	r0, r3
 80063de:	81a0      	strh	r0, [r4, #12]
 80063e0:	bb2d      	cbnz	r5, 800642e <setvbuf+0xe6>
 80063e2:	9d00      	ldr	r5, [sp, #0]
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 fbf1 	bl	8006bcc <malloc>
 80063ea:	4606      	mov	r6, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d152      	bne.n	8006496 <setvbuf+0x14e>
 80063f0:	f8dd 9000 	ldr.w	r9, [sp]
 80063f4:	45a9      	cmp	r9, r5
 80063f6:	d140      	bne.n	800647a <setvbuf+0x132>
 80063f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80063fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006400:	f043 0202 	orr.w	r2, r3, #2
 8006404:	81a2      	strh	r2, [r4, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	60a2      	str	r2, [r4, #8]
 800640a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800640e:	6022      	str	r2, [r4, #0]
 8006410:	6122      	str	r2, [r4, #16]
 8006412:	2201      	movs	r2, #1
 8006414:	6162      	str	r2, [r4, #20]
 8006416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006418:	07d6      	lsls	r6, r2, #31
 800641a:	d404      	bmi.n	8006426 <setvbuf+0xde>
 800641c:	0598      	lsls	r0, r3, #22
 800641e:	d402      	bmi.n	8006426 <setvbuf+0xde>
 8006420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006422:	f000 fa25 	bl	8006870 <__retarget_lock_release_recursive>
 8006426:	4628      	mov	r0, r5
 8006428:	b003      	add	sp, #12
 800642a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800642e:	2e00      	cmp	r6, #0
 8006430:	d0d8      	beq.n	80063e4 <setvbuf+0x9c>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b913      	cbnz	r3, 800643c <setvbuf+0xf4>
 8006436:	4638      	mov	r0, r7
 8006438:	f000 f8c6 	bl	80065c8 <__sinit>
 800643c:	f1b8 0f01 	cmp.w	r8, #1
 8006440:	bf08      	it	eq
 8006442:	89a3      	ldrheq	r3, [r4, #12]
 8006444:	6026      	str	r6, [r4, #0]
 8006446:	bf04      	itt	eq
 8006448:	f043 0301 	orreq.w	r3, r3, #1
 800644c:	81a3      	strheq	r3, [r4, #12]
 800644e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006452:	f013 0208 	ands.w	r2, r3, #8
 8006456:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800645a:	d01e      	beq.n	800649a <setvbuf+0x152>
 800645c:	07d9      	lsls	r1, r3, #31
 800645e:	bf41      	itttt	mi
 8006460:	2200      	movmi	r2, #0
 8006462:	426d      	negmi	r5, r5
 8006464:	60a2      	strmi	r2, [r4, #8]
 8006466:	61a5      	strmi	r5, [r4, #24]
 8006468:	bf58      	it	pl
 800646a:	60a5      	strpl	r5, [r4, #8]
 800646c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800646e:	07d2      	lsls	r2, r2, #31
 8006470:	d401      	bmi.n	8006476 <setvbuf+0x12e>
 8006472:	059b      	lsls	r3, r3, #22
 8006474:	d513      	bpl.n	800649e <setvbuf+0x156>
 8006476:	2500      	movs	r5, #0
 8006478:	e7d5      	b.n	8006426 <setvbuf+0xde>
 800647a:	4648      	mov	r0, r9
 800647c:	f000 fba6 	bl	8006bcc <malloc>
 8006480:	4606      	mov	r6, r0
 8006482:	2800      	cmp	r0, #0
 8006484:	d0b8      	beq.n	80063f8 <setvbuf+0xb0>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	464d      	mov	r5, r9
 8006490:	e7cf      	b.n	8006432 <setvbuf+0xea>
 8006492:	2500      	movs	r5, #0
 8006494:	e7b2      	b.n	80063fc <setvbuf+0xb4>
 8006496:	46a9      	mov	r9, r5
 8006498:	e7f5      	b.n	8006486 <setvbuf+0x13e>
 800649a:	60a2      	str	r2, [r4, #8]
 800649c:	e7e6      	b.n	800646c <setvbuf+0x124>
 800649e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064a0:	f000 f9e6 	bl	8006870 <__retarget_lock_release_recursive>
 80064a4:	e7e7      	b.n	8006476 <setvbuf+0x12e>
 80064a6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80064aa:	e7bc      	b.n	8006426 <setvbuf+0xde>
 80064ac:	2000001c 	.word	0x2000001c

080064b0 <std>:
 80064b0:	2300      	movs	r3, #0
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064be:	6083      	str	r3, [r0, #8]
 80064c0:	8181      	strh	r1, [r0, #12]
 80064c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80064c4:	81c2      	strh	r2, [r0, #14]
 80064c6:	6183      	str	r3, [r0, #24]
 80064c8:	4619      	mov	r1, r3
 80064ca:	2208      	movs	r2, #8
 80064cc:	305c      	adds	r0, #92	@ 0x5c
 80064ce:	f000 f98b 	bl	80067e8 <memset>
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x58>)
 80064d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x5c>)
 80064d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x60>)
 80064dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <std+0x64>)
 80064e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <std+0x68>)
 80064e4:	6224      	str	r4, [r4, #32]
 80064e6:	429c      	cmp	r4, r3
 80064e8:	d006      	beq.n	80064f8 <std+0x48>
 80064ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ee:	4294      	cmp	r4, r2
 80064f0:	d002      	beq.n	80064f8 <std+0x48>
 80064f2:	33d0      	adds	r3, #208	@ 0xd0
 80064f4:	429c      	cmp	r4, r3
 80064f6:	d105      	bne.n	8006504 <std+0x54>
 80064f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006500:	f000 b9b4 	b.w	800686c <__retarget_lock_init_recursive>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	080071a9 	.word	0x080071a9
 800650c:	080071cb 	.word	0x080071cb
 8006510:	08007203 	.word	0x08007203
 8006514:	08007227 	.word	0x08007227
 8006518:	20004a80 	.word	0x20004a80

0800651c <stdio_exit_handler>:
 800651c:	4a02      	ldr	r2, [pc, #8]	@ (8006528 <stdio_exit_handler+0xc>)
 800651e:	4903      	ldr	r1, [pc, #12]	@ (800652c <stdio_exit_handler+0x10>)
 8006520:	4803      	ldr	r0, [pc, #12]	@ (8006530 <stdio_exit_handler+0x14>)
 8006522:	f000 b869 	b.w	80065f8 <_fwalk_sglue>
 8006526:	bf00      	nop
 8006528:	20000010 	.word	0x20000010
 800652c:	08007141 	.word	0x08007141
 8006530:	20000020 	.word	0x20000020

08006534 <cleanup_stdio>:
 8006534:	6841      	ldr	r1, [r0, #4]
 8006536:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <cleanup_stdio+0x34>)
 8006538:	4299      	cmp	r1, r3
 800653a:	b510      	push	{r4, lr}
 800653c:	4604      	mov	r4, r0
 800653e:	d001      	beq.n	8006544 <cleanup_stdio+0x10>
 8006540:	f000 fdfe 	bl	8007140 <_fflush_r>
 8006544:	68a1      	ldr	r1, [r4, #8]
 8006546:	4b09      	ldr	r3, [pc, #36]	@ (800656c <cleanup_stdio+0x38>)
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <cleanup_stdio+0x1e>
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fdf7 	bl	8007140 <_fflush_r>
 8006552:	68e1      	ldr	r1, [r4, #12]
 8006554:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <cleanup_stdio+0x3c>)
 8006556:	4299      	cmp	r1, r3
 8006558:	d004      	beq.n	8006564 <cleanup_stdio+0x30>
 800655a:	4620      	mov	r0, r4
 800655c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006560:	f000 bdee 	b.w	8007140 <_fflush_r>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	20004a80 	.word	0x20004a80
 800656c:	20004ae8 	.word	0x20004ae8
 8006570:	20004b50 	.word	0x20004b50

08006574 <global_stdio_init.part.0>:
 8006574:	b510      	push	{r4, lr}
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <global_stdio_init.part.0+0x30>)
 8006578:	4c0b      	ldr	r4, [pc, #44]	@ (80065a8 <global_stdio_init.part.0+0x34>)
 800657a:	4a0c      	ldr	r2, [pc, #48]	@ (80065ac <global_stdio_init.part.0+0x38>)
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	4620      	mov	r0, r4
 8006580:	2200      	movs	r2, #0
 8006582:	2104      	movs	r1, #4
 8006584:	f7ff ff94 	bl	80064b0 <std>
 8006588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800658c:	2201      	movs	r2, #1
 800658e:	2109      	movs	r1, #9
 8006590:	f7ff ff8e 	bl	80064b0 <std>
 8006594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006598:	2202      	movs	r2, #2
 800659a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659e:	2112      	movs	r1, #18
 80065a0:	f7ff bf86 	b.w	80064b0 <std>
 80065a4:	20004bb8 	.word	0x20004bb8
 80065a8:	20004a80 	.word	0x20004a80
 80065ac:	0800651d 	.word	0x0800651d

080065b0 <__sfp_lock_acquire>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__sfp_lock_acquire+0x8>)
 80065b2:	f000 b95c 	b.w	800686e <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	20004bbd 	.word	0x20004bbd

080065bc <__sfp_lock_release>:
 80065bc:	4801      	ldr	r0, [pc, #4]	@ (80065c4 <__sfp_lock_release+0x8>)
 80065be:	f000 b957 	b.w	8006870 <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	20004bbd 	.word	0x20004bbd

080065c8 <__sinit>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4604      	mov	r4, r0
 80065cc:	f7ff fff0 	bl	80065b0 <__sfp_lock_acquire>
 80065d0:	6a23      	ldr	r3, [r4, #32]
 80065d2:	b11b      	cbz	r3, 80065dc <__sinit+0x14>
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d8:	f7ff bff0 	b.w	80065bc <__sfp_lock_release>
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <__sinit+0x28>)
 80065de:	6223      	str	r3, [r4, #32]
 80065e0:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__sinit+0x2c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f5      	bne.n	80065d4 <__sinit+0xc>
 80065e8:	f7ff ffc4 	bl	8006574 <global_stdio_init.part.0>
 80065ec:	e7f2      	b.n	80065d4 <__sinit+0xc>
 80065ee:	bf00      	nop
 80065f0:	08006535 	.word	0x08006535
 80065f4:	20004bb8 	.word	0x20004bb8

080065f8 <_fwalk_sglue>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	4607      	mov	r7, r0
 80065fe:	4688      	mov	r8, r1
 8006600:	4614      	mov	r4, r2
 8006602:	2600      	movs	r6, #0
 8006604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006608:	f1b9 0901 	subs.w	r9, r9, #1
 800660c:	d505      	bpl.n	800661a <_fwalk_sglue+0x22>
 800660e:	6824      	ldr	r4, [r4, #0]
 8006610:	2c00      	cmp	r4, #0
 8006612:	d1f7      	bne.n	8006604 <_fwalk_sglue+0xc>
 8006614:	4630      	mov	r0, r6
 8006616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d907      	bls.n	8006630 <_fwalk_sglue+0x38>
 8006620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006624:	3301      	adds	r3, #1
 8006626:	d003      	beq.n	8006630 <_fwalk_sglue+0x38>
 8006628:	4629      	mov	r1, r5
 800662a:	4638      	mov	r0, r7
 800662c:	47c0      	blx	r8
 800662e:	4306      	orrs	r6, r0
 8006630:	3568      	adds	r5, #104	@ 0x68
 8006632:	e7e9      	b.n	8006608 <_fwalk_sglue+0x10>

08006634 <__swhatbuf_r>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	460c      	mov	r4, r1
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	2900      	cmp	r1, #0
 800663e:	b096      	sub	sp, #88	@ 0x58
 8006640:	4615      	mov	r5, r2
 8006642:	461e      	mov	r6, r3
 8006644:	da0d      	bge.n	8006662 <__swhatbuf_r+0x2e>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	bf14      	ite	ne
 8006652:	2340      	movne	r3, #64	@ 0x40
 8006654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006658:	2000      	movs	r0, #0
 800665a:	6031      	str	r1, [r6, #0]
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	b016      	add	sp, #88	@ 0x58
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	466a      	mov	r2, sp
 8006664:	f000 f906 	bl	8006874 <_fstat_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	dbec      	blt.n	8006646 <__swhatbuf_r+0x12>
 800666c:	9901      	ldr	r1, [sp, #4]
 800666e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006676:	4259      	negs	r1, r3
 8006678:	4159      	adcs	r1, r3
 800667a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800667e:	e7eb      	b.n	8006658 <__swhatbuf_r+0x24>

08006680 <__smakebuf_r>:
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006684:	079d      	lsls	r5, r3, #30
 8006686:	4606      	mov	r6, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d507      	bpl.n	800669c <__smakebuf_r+0x1c>
 800668c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2301      	movs	r3, #1
 8006696:	6163      	str	r3, [r4, #20]
 8006698:	b003      	add	sp, #12
 800669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669c:	ab01      	add	r3, sp, #4
 800669e:	466a      	mov	r2, sp
 80066a0:	f7ff ffc8 	bl	8006634 <__swhatbuf_r>
 80066a4:	9f00      	ldr	r7, [sp, #0]
 80066a6:	4605      	mov	r5, r0
 80066a8:	4639      	mov	r1, r7
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 fab8 	bl	8006c20 <_malloc_r>
 80066b0:	b948      	cbnz	r0, 80066c6 <__smakebuf_r+0x46>
 80066b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b6:	059a      	lsls	r2, r3, #22
 80066b8:	d4ee      	bmi.n	8006698 <__smakebuf_r+0x18>
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	e7e2      	b.n	800668c <__smakebuf_r+0xc>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	6020      	str	r0, [r4, #0]
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066d6:	b15b      	cbz	r3, 80066f0 <__smakebuf_r+0x70>
 80066d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f88b 	bl	80067f8 <_isatty_r>
 80066e2:	b128      	cbz	r0, 80066f0 <__smakebuf_r+0x70>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	431d      	orrs	r5, r3
 80066f4:	81a5      	strh	r5, [r4, #12]
 80066f6:	e7cf      	b.n	8006698 <__smakebuf_r+0x18>

080066f8 <iprintf>:
 80066f8:	b40f      	push	{r0, r1, r2, r3}
 80066fa:	b507      	push	{r0, r1, r2, lr}
 80066fc:	4906      	ldr	r1, [pc, #24]	@ (8006718 <iprintf+0x20>)
 80066fe:	ab04      	add	r3, sp, #16
 8006700:	6808      	ldr	r0, [r1, #0]
 8006702:	f853 2b04 	ldr.w	r2, [r3], #4
 8006706:	6881      	ldr	r1, [r0, #8]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	f000 f947 	bl	800699c <_vfiprintf_r>
 800670e:	b003      	add	sp, #12
 8006710:	f85d eb04 	ldr.w	lr, [sp], #4
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	2000001c 	.word	0x2000001c

0800671c <putchar>:
 800671c:	4b02      	ldr	r3, [pc, #8]	@ (8006728 <putchar+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	6882      	ldr	r2, [r0, #8]
 8006724:	f000 be18 	b.w	8007358 <_putc_r>
 8006728:	2000001c 	.word	0x2000001c

0800672c <_puts_r>:
 800672c:	6a03      	ldr	r3, [r0, #32]
 800672e:	b570      	push	{r4, r5, r6, lr}
 8006730:	6884      	ldr	r4, [r0, #8]
 8006732:	4605      	mov	r5, r0
 8006734:	460e      	mov	r6, r1
 8006736:	b90b      	cbnz	r3, 800673c <_puts_r+0x10>
 8006738:	f7ff ff46 	bl	80065c8 <__sinit>
 800673c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d405      	bmi.n	800674e <_puts_r+0x22>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	0598      	lsls	r0, r3, #22
 8006746:	d402      	bmi.n	800674e <_puts_r+0x22>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f000 f890 	bl	800686e <__retarget_lock_acquire_recursive>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	0719      	lsls	r1, r3, #28
 8006752:	d502      	bpl.n	800675a <_puts_r+0x2e>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d135      	bne.n	80067c6 <_puts_r+0x9a>
 800675a:	4621      	mov	r1, r4
 800675c:	4628      	mov	r0, r5
 800675e:	f000 fda5 	bl	80072ac <__swsetup_r>
 8006762:	b380      	cbz	r0, 80067c6 <_puts_r+0x9a>
 8006764:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800676a:	07da      	lsls	r2, r3, #31
 800676c:	d405      	bmi.n	800677a <_puts_r+0x4e>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d402      	bmi.n	800677a <_puts_r+0x4e>
 8006774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006776:	f000 f87b 	bl	8006870 <__retarget_lock_release_recursive>
 800677a:	4628      	mov	r0, r5
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	2b00      	cmp	r3, #0
 8006780:	da04      	bge.n	800678c <_puts_r+0x60>
 8006782:	69a2      	ldr	r2, [r4, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	dc17      	bgt.n	80067b8 <_puts_r+0x8c>
 8006788:	290a      	cmp	r1, #10
 800678a:	d015      	beq.n	80067b8 <_puts_r+0x8c>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	7019      	strb	r1, [r3, #0]
 8006794:	68a3      	ldr	r3, [r4, #8]
 8006796:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800679a:	3b01      	subs	r3, #1
 800679c:	60a3      	str	r3, [r4, #8]
 800679e:	2900      	cmp	r1, #0
 80067a0:	d1ed      	bne.n	800677e <_puts_r+0x52>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da11      	bge.n	80067ca <_puts_r+0x9e>
 80067a6:	4622      	mov	r2, r4
 80067a8:	210a      	movs	r1, #10
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 fd3f 	bl	800722e <__swbuf_r>
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0d7      	beq.n	8006764 <_puts_r+0x38>
 80067b4:	250a      	movs	r5, #10
 80067b6:	e7d7      	b.n	8006768 <_puts_r+0x3c>
 80067b8:	4622      	mov	r2, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 fd37 	bl	800722e <__swbuf_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d1e7      	bne.n	8006794 <_puts_r+0x68>
 80067c4:	e7ce      	b.n	8006764 <_puts_r+0x38>
 80067c6:	3e01      	subs	r6, #1
 80067c8:	e7e4      	b.n	8006794 <_puts_r+0x68>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	6022      	str	r2, [r4, #0]
 80067d0:	220a      	movs	r2, #10
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	e7ee      	b.n	80067b4 <_puts_r+0x88>
	...

080067d8 <puts>:
 80067d8:	4b02      	ldr	r3, [pc, #8]	@ (80067e4 <puts+0xc>)
 80067da:	4601      	mov	r1, r0
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	f7ff bfa5 	b.w	800672c <_puts_r>
 80067e2:	bf00      	nop
 80067e4:	2000001c 	.word	0x2000001c

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <_isatty_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	@ (8006814 <_isatty_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fa fa49 	bl	8000c9a <_isatty>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_isatty_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_isatty_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20004bc0 	.word	0x20004bc0

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	@ (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000001c 	.word	0x2000001c

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	4d0d      	ldr	r5, [pc, #52]	@ (800685c <__libc_init_array+0x38>)
 8006828:	4c0d      	ldr	r4, [pc, #52]	@ (8006860 <__libc_init_array+0x3c>)
 800682a:	1b64      	subs	r4, r4, r5
 800682c:	10a4      	asrs	r4, r4, #2
 800682e:	2600      	movs	r6, #0
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	4d0b      	ldr	r5, [pc, #44]	@ (8006864 <__libc_init_array+0x40>)
 8006836:	4c0c      	ldr	r4, [pc, #48]	@ (8006868 <__libc_init_array+0x44>)
 8006838:	f000 fe18 	bl	800746c <_init>
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	2600      	movs	r6, #0
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	08007590 	.word	0x08007590
 8006860:	08007590 	.word	0x08007590
 8006864:	08007590 	.word	0x08007590
 8006868:	08007594 	.word	0x08007594

0800686c <__retarget_lock_init_recursive>:
 800686c:	4770      	bx	lr

0800686e <__retarget_lock_acquire_recursive>:
 800686e:	4770      	bx	lr

08006870 <__retarget_lock_release_recursive>:
 8006870:	4770      	bx	lr
	...

08006874 <_fstat_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d07      	ldr	r5, [pc, #28]	@ (8006894 <_fstat_r+0x20>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	4611      	mov	r1, r2
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	f7fa f9fa 	bl	8000c7a <_fstat>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	d102      	bne.n	8006890 <_fstat_r+0x1c>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	b103      	cbz	r3, 8006890 <_fstat_r+0x1c>
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	bd38      	pop	{r3, r4, r5, pc}
 8006892:	bf00      	nop
 8006894:	20004bc0 	.word	0x20004bc0

08006898 <memcpy>:
 8006898:	440a      	add	r2, r1
 800689a:	4291      	cmp	r1, r2
 800689c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068a0:	d100      	bne.n	80068a4 <memcpy+0xc>
 80068a2:	4770      	bx	lr
 80068a4:	b510      	push	{r4, lr}
 80068a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ae:	4291      	cmp	r1, r2
 80068b0:	d1f9      	bne.n	80068a6 <memcpy+0xe>
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <_free_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4605      	mov	r5, r0
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d041      	beq.n	8006940 <_free_r+0x8c>
 80068bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c0:	1f0c      	subs	r4, r1, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	18e4      	addlt	r4, r4, r3
 80068c8:	f000 fc62 	bl	8007190 <__malloc_lock>
 80068cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <_free_r+0x90>)
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	b933      	cbnz	r3, 80068e0 <_free_r+0x2c>
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	6014      	str	r4, [r2, #0]
 80068d6:	4628      	mov	r0, r5
 80068d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068dc:	f000 bc5e 	b.w	800719c <__malloc_unlock>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d908      	bls.n	80068f6 <_free_r+0x42>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	1821      	adds	r1, r4, r0
 80068e8:	428b      	cmp	r3, r1
 80068ea:	bf01      	itttt	eq
 80068ec:	6819      	ldreq	r1, [r3, #0]
 80068ee:	685b      	ldreq	r3, [r3, #4]
 80068f0:	1809      	addeq	r1, r1, r0
 80068f2:	6021      	streq	r1, [r4, #0]
 80068f4:	e7ed      	b.n	80068d2 <_free_r+0x1e>
 80068f6:	461a      	mov	r2, r3
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	b10b      	cbz	r3, 8006900 <_free_r+0x4c>
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	d9fa      	bls.n	80068f6 <_free_r+0x42>
 8006900:	6811      	ldr	r1, [r2, #0]
 8006902:	1850      	adds	r0, r2, r1
 8006904:	42a0      	cmp	r0, r4
 8006906:	d10b      	bne.n	8006920 <_free_r+0x6c>
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	4401      	add	r1, r0
 800690c:	1850      	adds	r0, r2, r1
 800690e:	4283      	cmp	r3, r0
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	d1e0      	bne.n	80068d6 <_free_r+0x22>
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	6053      	str	r3, [r2, #4]
 800691a:	4408      	add	r0, r1
 800691c:	6010      	str	r0, [r2, #0]
 800691e:	e7da      	b.n	80068d6 <_free_r+0x22>
 8006920:	d902      	bls.n	8006928 <_free_r+0x74>
 8006922:	230c      	movs	r3, #12
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	e7d6      	b.n	80068d6 <_free_r+0x22>
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	1821      	adds	r1, r4, r0
 800692c:	428b      	cmp	r3, r1
 800692e:	bf04      	itt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	bf04      	itt	eq
 8006938:	1809      	addeq	r1, r1, r0
 800693a:	6021      	streq	r1, [r4, #0]
 800693c:	6054      	str	r4, [r2, #4]
 800693e:	e7ca      	b.n	80068d6 <_free_r+0x22>
 8006940:	bd38      	pop	{r3, r4, r5, pc}
 8006942:	bf00      	nop
 8006944:	20004bc8 	.word	0x20004bc8

08006948 <__sfputc_r>:
 8006948:	6893      	ldr	r3, [r2, #8]
 800694a:	3b01      	subs	r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	b410      	push	{r4}
 8006950:	6093      	str	r3, [r2, #8]
 8006952:	da08      	bge.n	8006966 <__sfputc_r+0x1e>
 8006954:	6994      	ldr	r4, [r2, #24]
 8006956:	42a3      	cmp	r3, r4
 8006958:	db01      	blt.n	800695e <__sfputc_r+0x16>
 800695a:	290a      	cmp	r1, #10
 800695c:	d103      	bne.n	8006966 <__sfputc_r+0x1e>
 800695e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006962:	f000 bc64 	b.w	800722e <__swbuf_r>
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	1c58      	adds	r0, r3, #1
 800696a:	6010      	str	r0, [r2, #0]
 800696c:	7019      	strb	r1, [r3, #0]
 800696e:	4608      	mov	r0, r1
 8006970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006974:	4770      	bx	lr

08006976 <__sfputs_r>:
 8006976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006978:	4606      	mov	r6, r0
 800697a:	460f      	mov	r7, r1
 800697c:	4614      	mov	r4, r2
 800697e:	18d5      	adds	r5, r2, r3
 8006980:	42ac      	cmp	r4, r5
 8006982:	d101      	bne.n	8006988 <__sfputs_r+0x12>
 8006984:	2000      	movs	r0, #0
 8006986:	e007      	b.n	8006998 <__sfputs_r+0x22>
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	463a      	mov	r2, r7
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ffda 	bl	8006948 <__sfputc_r>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d1f3      	bne.n	8006980 <__sfputs_r+0xa>
 8006998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800699c <_vfiprintf_r>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	460d      	mov	r5, r1
 80069a2:	b09d      	sub	sp, #116	@ 0x74
 80069a4:	4614      	mov	r4, r2
 80069a6:	4698      	mov	r8, r3
 80069a8:	4606      	mov	r6, r0
 80069aa:	b118      	cbz	r0, 80069b4 <_vfiprintf_r+0x18>
 80069ac:	6a03      	ldr	r3, [r0, #32]
 80069ae:	b90b      	cbnz	r3, 80069b4 <_vfiprintf_r+0x18>
 80069b0:	f7ff fe0a 	bl	80065c8 <__sinit>
 80069b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069b6:	07d9      	lsls	r1, r3, #31
 80069b8:	d405      	bmi.n	80069c6 <_vfiprintf_r+0x2a>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	059a      	lsls	r2, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_vfiprintf_r+0x2a>
 80069c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069c2:	f7ff ff54 	bl	800686e <__retarget_lock_acquire_recursive>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	071b      	lsls	r3, r3, #28
 80069ca:	d501      	bpl.n	80069d0 <_vfiprintf_r+0x34>
 80069cc:	692b      	ldr	r3, [r5, #16]
 80069ce:	b99b      	cbnz	r3, 80069f8 <_vfiprintf_r+0x5c>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 fc6a 	bl	80072ac <__swsetup_r>
 80069d8:	b170      	cbz	r0, 80069f8 <_vfiprintf_r+0x5c>
 80069da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069dc:	07dc      	lsls	r4, r3, #31
 80069de:	d504      	bpl.n	80069ea <_vfiprintf_r+0x4e>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069e4:	b01d      	add	sp, #116	@ 0x74
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	0598      	lsls	r0, r3, #22
 80069ee:	d4f7      	bmi.n	80069e0 <_vfiprintf_r+0x44>
 80069f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069f2:	f7ff ff3d 	bl	8006870 <__retarget_lock_release_recursive>
 80069f6:	e7f3      	b.n	80069e0 <_vfiprintf_r+0x44>
 80069f8:	2300      	movs	r3, #0
 80069fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fc:	2320      	movs	r3, #32
 80069fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a06:	2330      	movs	r3, #48	@ 0x30
 8006a08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bb8 <_vfiprintf_r+0x21c>
 8006a0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a10:	f04f 0901 	mov.w	r9, #1
 8006a14:	4623      	mov	r3, r4
 8006a16:	469a      	mov	sl, r3
 8006a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1c:	b10a      	cbz	r2, 8006a22 <_vfiprintf_r+0x86>
 8006a1e:	2a25      	cmp	r2, #37	@ 0x25
 8006a20:	d1f9      	bne.n	8006a16 <_vfiprintf_r+0x7a>
 8006a22:	ebba 0b04 	subs.w	fp, sl, r4
 8006a26:	d00b      	beq.n	8006a40 <_vfiprintf_r+0xa4>
 8006a28:	465b      	mov	r3, fp
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ffa1 	bl	8006976 <__sfputs_r>
 8006a34:	3001      	adds	r0, #1
 8006a36:	f000 80a7 	beq.w	8006b88 <_vfiprintf_r+0x1ec>
 8006a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3c:	445a      	add	r2, fp
 8006a3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a40:	f89a 3000 	ldrb.w	r3, [sl]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 809f 	beq.w	8006b88 <_vfiprintf_r+0x1ec>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a54:	f10a 0a01 	add.w	sl, sl, #1
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9307      	str	r3, [sp, #28]
 8006a5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a60:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a62:	4654      	mov	r4, sl
 8006a64:	2205      	movs	r2, #5
 8006a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6a:	4853      	ldr	r0, [pc, #332]	@ (8006bb8 <_vfiprintf_r+0x21c>)
 8006a6c:	f7f9 fbb8 	bl	80001e0 <memchr>
 8006a70:	9a04      	ldr	r2, [sp, #16]
 8006a72:	b9d8      	cbnz	r0, 8006aac <_vfiprintf_r+0x110>
 8006a74:	06d1      	lsls	r1, r2, #27
 8006a76:	bf44      	itt	mi
 8006a78:	2320      	movmi	r3, #32
 8006a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a7e:	0713      	lsls	r3, r2, #28
 8006a80:	bf44      	itt	mi
 8006a82:	232b      	movmi	r3, #43	@ 0x2b
 8006a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a88:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8e:	d015      	beq.n	8006abc <_vfiprintf_r+0x120>
 8006a90:	9a07      	ldr	r2, [sp, #28]
 8006a92:	4654      	mov	r4, sl
 8006a94:	2000      	movs	r0, #0
 8006a96:	f04f 0c0a 	mov.w	ip, #10
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa0:	3b30      	subs	r3, #48	@ 0x30
 8006aa2:	2b09      	cmp	r3, #9
 8006aa4:	d94b      	bls.n	8006b3e <_vfiprintf_r+0x1a2>
 8006aa6:	b1b0      	cbz	r0, 8006ad6 <_vfiprintf_r+0x13a>
 8006aa8:	9207      	str	r2, [sp, #28]
 8006aaa:	e014      	b.n	8006ad6 <_vfiprintf_r+0x13a>
 8006aac:	eba0 0308 	sub.w	r3, r0, r8
 8006ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	9304      	str	r3, [sp, #16]
 8006ab8:	46a2      	mov	sl, r4
 8006aba:	e7d2      	b.n	8006a62 <_vfiprintf_r+0xc6>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	1d19      	adds	r1, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	9103      	str	r1, [sp, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfbb      	ittet	lt
 8006ac8:	425b      	neglt	r3, r3
 8006aca:	f042 0202 	orrlt.w	r2, r2, #2
 8006ace:	9307      	strge	r3, [sp, #28]
 8006ad0:	9307      	strlt	r3, [sp, #28]
 8006ad2:	bfb8      	it	lt
 8006ad4:	9204      	strlt	r2, [sp, #16]
 8006ad6:	7823      	ldrb	r3, [r4, #0]
 8006ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ada:	d10a      	bne.n	8006af2 <_vfiprintf_r+0x156>
 8006adc:	7863      	ldrb	r3, [r4, #1]
 8006ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae0:	d132      	bne.n	8006b48 <_vfiprintf_r+0x1ac>
 8006ae2:	9b03      	ldr	r3, [sp, #12]
 8006ae4:	1d1a      	adds	r2, r3, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	9203      	str	r2, [sp, #12]
 8006aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aee:	3402      	adds	r4, #2
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bc8 <_vfiprintf_r+0x22c>
 8006af6:	7821      	ldrb	r1, [r4, #0]
 8006af8:	2203      	movs	r2, #3
 8006afa:	4650      	mov	r0, sl
 8006afc:	f7f9 fb70 	bl	80001e0 <memchr>
 8006b00:	b138      	cbz	r0, 8006b12 <_vfiprintf_r+0x176>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	eba0 000a 	sub.w	r0, r0, sl
 8006b08:	2240      	movs	r2, #64	@ 0x40
 8006b0a:	4082      	lsls	r2, r0
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	3401      	adds	r4, #1
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b16:	4829      	ldr	r0, [pc, #164]	@ (8006bbc <_vfiprintf_r+0x220>)
 8006b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b1c:	2206      	movs	r2, #6
 8006b1e:	f7f9 fb5f 	bl	80001e0 <memchr>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d03f      	beq.n	8006ba6 <_vfiprintf_r+0x20a>
 8006b26:	4b26      	ldr	r3, [pc, #152]	@ (8006bc0 <_vfiprintf_r+0x224>)
 8006b28:	bb1b      	cbnz	r3, 8006b72 <_vfiprintf_r+0x1d6>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	3307      	adds	r3, #7
 8006b2e:	f023 0307 	bic.w	r3, r3, #7
 8006b32:	3308      	adds	r3, #8
 8006b34:	9303      	str	r3, [sp, #12]
 8006b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b38:	443b      	add	r3, r7
 8006b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b3c:	e76a      	b.n	8006a14 <_vfiprintf_r+0x78>
 8006b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b42:	460c      	mov	r4, r1
 8006b44:	2001      	movs	r0, #1
 8006b46:	e7a8      	b.n	8006a9a <_vfiprintf_r+0xfe>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	3401      	adds	r4, #1
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f04f 0c0a 	mov.w	ip, #10
 8006b54:	4620      	mov	r0, r4
 8006b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b5a:	3a30      	subs	r2, #48	@ 0x30
 8006b5c:	2a09      	cmp	r2, #9
 8006b5e:	d903      	bls.n	8006b68 <_vfiprintf_r+0x1cc>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0c6      	beq.n	8006af2 <_vfiprintf_r+0x156>
 8006b64:	9105      	str	r1, [sp, #20]
 8006b66:	e7c4      	b.n	8006af2 <_vfiprintf_r+0x156>
 8006b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e7f0      	b.n	8006b54 <_vfiprintf_r+0x1b8>
 8006b72:	ab03      	add	r3, sp, #12
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	462a      	mov	r2, r5
 8006b78:	4b12      	ldr	r3, [pc, #72]	@ (8006bc4 <_vfiprintf_r+0x228>)
 8006b7a:	a904      	add	r1, sp, #16
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f3af 8000 	nop.w
 8006b82:	4607      	mov	r7, r0
 8006b84:	1c78      	adds	r0, r7, #1
 8006b86:	d1d6      	bne.n	8006b36 <_vfiprintf_r+0x19a>
 8006b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b8a:	07d9      	lsls	r1, r3, #31
 8006b8c:	d405      	bmi.n	8006b9a <_vfiprintf_r+0x1fe>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	059a      	lsls	r2, r3, #22
 8006b92:	d402      	bmi.n	8006b9a <_vfiprintf_r+0x1fe>
 8006b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b96:	f7ff fe6b 	bl	8006870 <__retarget_lock_release_recursive>
 8006b9a:	89ab      	ldrh	r3, [r5, #12]
 8006b9c:	065b      	lsls	r3, r3, #25
 8006b9e:	f53f af1f 	bmi.w	80069e0 <_vfiprintf_r+0x44>
 8006ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ba4:	e71e      	b.n	80069e4 <_vfiprintf_r+0x48>
 8006ba6:	ab03      	add	r3, sp, #12
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	462a      	mov	r2, r5
 8006bac:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <_vfiprintf_r+0x228>)
 8006bae:	a904      	add	r1, sp, #16
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f000 f923 	bl	8006dfc <_printf_i>
 8006bb6:	e7e4      	b.n	8006b82 <_vfiprintf_r+0x1e6>
 8006bb8:	08007554 	.word	0x08007554
 8006bbc:	0800755e 	.word	0x0800755e
 8006bc0:	00000000 	.word	0x00000000
 8006bc4:	08006977 	.word	0x08006977
 8006bc8:	0800755a 	.word	0x0800755a

08006bcc <malloc>:
 8006bcc:	4b02      	ldr	r3, [pc, #8]	@ (8006bd8 <malloc+0xc>)
 8006bce:	4601      	mov	r1, r0
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	f000 b825 	b.w	8006c20 <_malloc_r>
 8006bd6:	bf00      	nop
 8006bd8:	2000001c 	.word	0x2000001c

08006bdc <sbrk_aligned>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4e0f      	ldr	r6, [pc, #60]	@ (8006c1c <sbrk_aligned+0x40>)
 8006be0:	460c      	mov	r4, r1
 8006be2:	6831      	ldr	r1, [r6, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	b911      	cbnz	r1, 8006bee <sbrk_aligned+0x12>
 8006be8:	f000 fc0e 	bl	8007408 <_sbrk_r>
 8006bec:	6030      	str	r0, [r6, #0]
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 fc09 	bl	8007408 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d103      	bne.n	8006c02 <sbrk_aligned+0x26>
 8006bfa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006bfe:	4620      	mov	r0, r4
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d0f8      	beq.n	8006bfe <sbrk_aligned+0x22>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fbfa 	bl	8007408 <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1f2      	bne.n	8006bfe <sbrk_aligned+0x22>
 8006c18:	e7ef      	b.n	8006bfa <sbrk_aligned+0x1e>
 8006c1a:	bf00      	nop
 8006c1c:	20004bc4 	.word	0x20004bc4

08006c20 <_malloc_r>:
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	1ccd      	adds	r5, r1, #3
 8006c26:	f025 0503 	bic.w	r5, r5, #3
 8006c2a:	3508      	adds	r5, #8
 8006c2c:	2d0c      	cmp	r5, #12
 8006c2e:	bf38      	it	cc
 8006c30:	250c      	movcc	r5, #12
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	4606      	mov	r6, r0
 8006c36:	db01      	blt.n	8006c3c <_malloc_r+0x1c>
 8006c38:	42a9      	cmp	r1, r5
 8006c3a:	d904      	bls.n	8006c46 <_malloc_r+0x26>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	2000      	movs	r0, #0
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d1c <_malloc_r+0xfc>
 8006c4a:	f000 faa1 	bl	8007190 <__malloc_lock>
 8006c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c52:	461c      	mov	r4, r3
 8006c54:	bb44      	cbnz	r4, 8006ca8 <_malloc_r+0x88>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffbf 	bl	8006bdc <sbrk_aligned>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	4604      	mov	r4, r0
 8006c62:	d158      	bne.n	8006d16 <_malloc_r+0xf6>
 8006c64:	f8d8 4000 	ldr.w	r4, [r8]
 8006c68:	4627      	mov	r7, r4
 8006c6a:	2f00      	cmp	r7, #0
 8006c6c:	d143      	bne.n	8006cf6 <_malloc_r+0xd6>
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	d04b      	beq.n	8006d0a <_malloc_r+0xea>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	eb04 0903 	add.w	r9, r4, r3
 8006c7c:	f000 fbc4 	bl	8007408 <_sbrk_r>
 8006c80:	4581      	cmp	r9, r0
 8006c82:	d142      	bne.n	8006d0a <_malloc_r+0xea>
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	1a6d      	subs	r5, r5, r1
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffa6 	bl	8006bdc <sbrk_aligned>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d03a      	beq.n	8006d0a <_malloc_r+0xea>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	442b      	add	r3, r5
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	bb62      	cbnz	r2, 8006cfc <_malloc_r+0xdc>
 8006ca2:	f8c8 7000 	str.w	r7, [r8]
 8006ca6:	e00f      	b.n	8006cc8 <_malloc_r+0xa8>
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	1b52      	subs	r2, r2, r5
 8006cac:	d420      	bmi.n	8006cf0 <_malloc_r+0xd0>
 8006cae:	2a0b      	cmp	r2, #11
 8006cb0:	d917      	bls.n	8006ce2 <_malloc_r+0xc2>
 8006cb2:	1961      	adds	r1, r4, r5
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	6025      	str	r5, [r4, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	6059      	strne	r1, [r3, #4]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	bf08      	it	eq
 8006cc0:	f8c8 1000 	streq.w	r1, [r8]
 8006cc4:	5162      	str	r2, [r4, r5]
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 fa67 	bl	800719c <__malloc_unlock>
 8006cce:	f104 000b 	add.w	r0, r4, #11
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	f020 0007 	bic.w	r0, r0, #7
 8006cd8:	1ac2      	subs	r2, r0, r3
 8006cda:	bf1c      	itt	ne
 8006cdc:	1a1b      	subne	r3, r3, r0
 8006cde:	50a3      	strne	r3, [r4, r2]
 8006ce0:	e7af      	b.n	8006c42 <_malloc_r+0x22>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bf0c      	ite	eq
 8006ce8:	f8c8 2000 	streq.w	r2, [r8]
 8006cec:	605a      	strne	r2, [r3, #4]
 8006cee:	e7eb      	b.n	8006cc8 <_malloc_r+0xa8>
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	6864      	ldr	r4, [r4, #4]
 8006cf4:	e7ae      	b.n	8006c54 <_malloc_r+0x34>
 8006cf6:	463c      	mov	r4, r7
 8006cf8:	687f      	ldr	r7, [r7, #4]
 8006cfa:	e7b6      	b.n	8006c6a <_malloc_r+0x4a>
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	d1fb      	bne.n	8006cfc <_malloc_r+0xdc>
 8006d04:	2300      	movs	r3, #0
 8006d06:	6053      	str	r3, [r2, #4]
 8006d08:	e7de      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	6033      	str	r3, [r6, #0]
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 fa44 	bl	800719c <__malloc_unlock>
 8006d14:	e794      	b.n	8006c40 <_malloc_r+0x20>
 8006d16:	6005      	str	r5, [r0, #0]
 8006d18:	e7d6      	b.n	8006cc8 <_malloc_r+0xa8>
 8006d1a:	bf00      	nop
 8006d1c:	20004bc8 	.word	0x20004bc8

08006d20 <_printf_common>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	4616      	mov	r6, r2
 8006d26:	4698      	mov	r8, r3
 8006d28:	688a      	ldr	r2, [r1, #8]
 8006d2a:	690b      	ldr	r3, [r1, #16]
 8006d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bfb8      	it	lt
 8006d34:	4613      	movlt	r3, r2
 8006d36:	6033      	str	r3, [r6, #0]
 8006d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	b10a      	cbz	r2, 8006d46 <_printf_common+0x26>
 8006d42:	3301      	adds	r3, #1
 8006d44:	6033      	str	r3, [r6, #0]
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	0699      	lsls	r1, r3, #26
 8006d4a:	bf42      	ittt	mi
 8006d4c:	6833      	ldrmi	r3, [r6, #0]
 8006d4e:	3302      	addmi	r3, #2
 8006d50:	6033      	strmi	r3, [r6, #0]
 8006d52:	6825      	ldr	r5, [r4, #0]
 8006d54:	f015 0506 	ands.w	r5, r5, #6
 8006d58:	d106      	bne.n	8006d68 <_printf_common+0x48>
 8006d5a:	f104 0a19 	add.w	sl, r4, #25
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	6832      	ldr	r2, [r6, #0]
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dc26      	bgt.n	8006db6 <_printf_common+0x96>
 8006d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	3b00      	subs	r3, #0
 8006d70:	bf18      	it	ne
 8006d72:	2301      	movne	r3, #1
 8006d74:	0692      	lsls	r2, r2, #26
 8006d76:	d42b      	bmi.n	8006dd0 <_printf_common+0xb0>
 8006d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	4638      	mov	r0, r7
 8006d80:	47c8      	blx	r9
 8006d82:	3001      	adds	r0, #1
 8006d84:	d01e      	beq.n	8006dc4 <_printf_common+0xa4>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	f003 0306 	and.w	r3, r3, #6
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	bf02      	ittt	eq
 8006d92:	68e5      	ldreq	r5, [r4, #12]
 8006d94:	6833      	ldreq	r3, [r6, #0]
 8006d96:	1aed      	subeq	r5, r5, r3
 8006d98:	68a3      	ldr	r3, [r4, #8]
 8006d9a:	bf0c      	ite	eq
 8006d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da0:	2500      	movne	r5, #0
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bfc4      	itt	gt
 8006da6:	1a9b      	subgt	r3, r3, r2
 8006da8:	18ed      	addgt	r5, r5, r3
 8006daa:	2600      	movs	r6, #0
 8006dac:	341a      	adds	r4, #26
 8006dae:	42b5      	cmp	r5, r6
 8006db0:	d11a      	bne.n	8006de8 <_printf_common+0xc8>
 8006db2:	2000      	movs	r0, #0
 8006db4:	e008      	b.n	8006dc8 <_printf_common+0xa8>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4652      	mov	r2, sl
 8006dba:	4641      	mov	r1, r8
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	47c8      	blx	r9
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d103      	bne.n	8006dcc <_printf_common+0xac>
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dcc:	3501      	adds	r5, #1
 8006dce:	e7c6      	b.n	8006d5e <_printf_common+0x3e>
 8006dd0:	18e1      	adds	r1, r4, r3
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	2030      	movs	r0, #48	@ 0x30
 8006dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dda:	4422      	add	r2, r4
 8006ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006de4:	3302      	adds	r3, #2
 8006de6:	e7c7      	b.n	8006d78 <_printf_common+0x58>
 8006de8:	2301      	movs	r3, #1
 8006dea:	4622      	mov	r2, r4
 8006dec:	4641      	mov	r1, r8
 8006dee:	4638      	mov	r0, r7
 8006df0:	47c8      	blx	r9
 8006df2:	3001      	adds	r0, #1
 8006df4:	d0e6      	beq.n	8006dc4 <_printf_common+0xa4>
 8006df6:	3601      	adds	r6, #1
 8006df8:	e7d9      	b.n	8006dae <_printf_common+0x8e>
	...

08006dfc <_printf_i>:
 8006dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	7e0f      	ldrb	r7, [r1, #24]
 8006e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e04:	2f78      	cmp	r7, #120	@ 0x78
 8006e06:	4691      	mov	r9, r2
 8006e08:	4680      	mov	r8, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	469a      	mov	sl, r3
 8006e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e12:	d807      	bhi.n	8006e24 <_printf_i+0x28>
 8006e14:	2f62      	cmp	r7, #98	@ 0x62
 8006e16:	d80a      	bhi.n	8006e2e <_printf_i+0x32>
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	f000 80d1 	beq.w	8006fc0 <_printf_i+0x1c4>
 8006e1e:	2f58      	cmp	r7, #88	@ 0x58
 8006e20:	f000 80b8 	beq.w	8006f94 <_printf_i+0x198>
 8006e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e2c:	e03a      	b.n	8006ea4 <_printf_i+0xa8>
 8006e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e32:	2b15      	cmp	r3, #21
 8006e34:	d8f6      	bhi.n	8006e24 <_printf_i+0x28>
 8006e36:	a101      	add	r1, pc, #4	@ (adr r1, 8006e3c <_printf_i+0x40>)
 8006e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006ea9 	.word	0x08006ea9
 8006e44:	08006e25 	.word	0x08006e25
 8006e48:	08006e25 	.word	0x08006e25
 8006e4c:	08006e25 	.word	0x08006e25
 8006e50:	08006e25 	.word	0x08006e25
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006e25 	.word	0x08006e25
 8006e5c:	08006e25 	.word	0x08006e25
 8006e60:	08006e25 	.word	0x08006e25
 8006e64:	08006e25 	.word	0x08006e25
 8006e68:	08006fa7 	.word	0x08006fa7
 8006e6c:	08006ed3 	.word	0x08006ed3
 8006e70:	08006f61 	.word	0x08006f61
 8006e74:	08006e25 	.word	0x08006e25
 8006e78:	08006e25 	.word	0x08006e25
 8006e7c:	08006fc9 	.word	0x08006fc9
 8006e80:	08006e25 	.word	0x08006e25
 8006e84:	08006ed3 	.word	0x08006ed3
 8006e88:	08006e25 	.word	0x08006e25
 8006e8c:	08006e25 	.word	0x08006e25
 8006e90:	08006f69 	.word	0x08006f69
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6032      	str	r2, [r6, #0]
 8006e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e09c      	b.n	8006fe2 <_printf_i+0x1e6>
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	1d19      	adds	r1, r3, #4
 8006eae:	6031      	str	r1, [r6, #0]
 8006eb0:	0606      	lsls	r6, r0, #24
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0xbc>
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	e003      	b.n	8006ec0 <_printf_i+0xc4>
 8006eb8:	0645      	lsls	r5, r0, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0xb8>
 8006ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	da03      	bge.n	8006ecc <_printf_i+0xd0>
 8006ec4:	232d      	movs	r3, #45	@ 0x2d
 8006ec6:	426d      	negs	r5, r5
 8006ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ecc:	4858      	ldr	r0, [pc, #352]	@ (8007030 <_printf_i+0x234>)
 8006ece:	230a      	movs	r3, #10
 8006ed0:	e011      	b.n	8006ef6 <_printf_i+0xfa>
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	0608      	lsls	r0, r1, #24
 8006ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006edc:	d402      	bmi.n	8006ee4 <_printf_i+0xe8>
 8006ede:	0649      	lsls	r1, r1, #25
 8006ee0:	bf48      	it	mi
 8006ee2:	b2ad      	uxthmi	r5, r5
 8006ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ee6:	4852      	ldr	r0, [pc, #328]	@ (8007030 <_printf_i+0x234>)
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	bf14      	ite	ne
 8006eec:	230a      	movne	r3, #10
 8006eee:	2308      	moveq	r3, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ef6:	6866      	ldr	r6, [r4, #4]
 8006ef8:	60a6      	str	r6, [r4, #8]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	db05      	blt.n	8006f0a <_printf_i+0x10e>
 8006efe:	6821      	ldr	r1, [r4, #0]
 8006f00:	432e      	orrs	r6, r5
 8006f02:	f021 0104 	bic.w	r1, r1, #4
 8006f06:	6021      	str	r1, [r4, #0]
 8006f08:	d04b      	beq.n	8006fa2 <_printf_i+0x1a6>
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f10:	fb03 5711 	mls	r7, r3, r1, r5
 8006f14:	5dc7      	ldrb	r7, [r0, r7]
 8006f16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f1a:	462f      	mov	r7, r5
 8006f1c:	42bb      	cmp	r3, r7
 8006f1e:	460d      	mov	r5, r1
 8006f20:	d9f4      	bls.n	8006f0c <_printf_i+0x110>
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d10b      	bne.n	8006f3e <_printf_i+0x142>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	07df      	lsls	r7, r3, #31
 8006f2a:	d508      	bpl.n	8006f3e <_printf_i+0x142>
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	6861      	ldr	r1, [r4, #4]
 8006f30:	4299      	cmp	r1, r3
 8006f32:	bfde      	ittt	le
 8006f34:	2330      	movle	r3, #48	@ 0x30
 8006f36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f3e:	1b92      	subs	r2, r2, r6
 8006f40:	6122      	str	r2, [r4, #16]
 8006f42:	f8cd a000 	str.w	sl, [sp]
 8006f46:	464b      	mov	r3, r9
 8006f48:	aa03      	add	r2, sp, #12
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f7ff fee7 	bl	8006d20 <_printf_common>
 8006f52:	3001      	adds	r0, #1
 8006f54:	d14a      	bne.n	8006fec <_printf_i+0x1f0>
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f5a:	b004      	add	sp, #16
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	f043 0320 	orr.w	r3, r3, #32
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	4832      	ldr	r0, [pc, #200]	@ (8007034 <_printf_i+0x238>)
 8006f6a:	2778      	movs	r7, #120	@ 0x78
 8006f6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	061f      	lsls	r7, r3, #24
 8006f76:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f7a:	d402      	bmi.n	8006f82 <_printf_i+0x186>
 8006f7c:	065f      	lsls	r7, r3, #25
 8006f7e:	bf48      	it	mi
 8006f80:	b2ad      	uxthmi	r5, r5
 8006f82:	6031      	str	r1, [r6, #0]
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	bf44      	itt	mi
 8006f88:	f043 0320 	orrmi.w	r3, r3, #32
 8006f8c:	6023      	strmi	r3, [r4, #0]
 8006f8e:	b11d      	cbz	r5, 8006f98 <_printf_i+0x19c>
 8006f90:	2310      	movs	r3, #16
 8006f92:	e7ad      	b.n	8006ef0 <_printf_i+0xf4>
 8006f94:	4826      	ldr	r0, [pc, #152]	@ (8007030 <_printf_i+0x234>)
 8006f96:	e7e9      	b.n	8006f6c <_printf_i+0x170>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	e7f6      	b.n	8006f90 <_printf_i+0x194>
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	e7bd      	b.n	8006f22 <_printf_i+0x126>
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	6825      	ldr	r5, [r4, #0]
 8006faa:	6961      	ldr	r1, [r4, #20]
 8006fac:	1d18      	adds	r0, r3, #4
 8006fae:	6030      	str	r0, [r6, #0]
 8006fb0:	062e      	lsls	r6, r5, #24
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	d501      	bpl.n	8006fba <_printf_i+0x1be>
 8006fb6:	6019      	str	r1, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <_printf_i+0x1c4>
 8006fba:	0668      	lsls	r0, r5, #25
 8006fbc:	d5fb      	bpl.n	8006fb6 <_printf_i+0x1ba>
 8006fbe:	8019      	strh	r1, [r3, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	e7bc      	b.n	8006f42 <_printf_i+0x146>
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	6032      	str	r2, [r6, #0]
 8006fce:	681e      	ldr	r6, [r3, #0]
 8006fd0:	6862      	ldr	r2, [r4, #4]
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7f9 f903 	bl	80001e0 <memchr>
 8006fda:	b108      	cbz	r0, 8006fe0 <_printf_i+0x1e4>
 8006fdc:	1b80      	subs	r0, r0, r6
 8006fde:	6060      	str	r0, [r4, #4]
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fea:	e7aa      	b.n	8006f42 <_printf_i+0x146>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	47d0      	blx	sl
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d0ad      	beq.n	8006f56 <_printf_i+0x15a>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	079b      	lsls	r3, r3, #30
 8006ffe:	d413      	bmi.n	8007028 <_printf_i+0x22c>
 8007000:	68e0      	ldr	r0, [r4, #12]
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	4298      	cmp	r0, r3
 8007006:	bfb8      	it	lt
 8007008:	4618      	movlt	r0, r3
 800700a:	e7a6      	b.n	8006f5a <_printf_i+0x15e>
 800700c:	2301      	movs	r3, #1
 800700e:	4632      	mov	r2, r6
 8007010:	4649      	mov	r1, r9
 8007012:	4640      	mov	r0, r8
 8007014:	47d0      	blx	sl
 8007016:	3001      	adds	r0, #1
 8007018:	d09d      	beq.n	8006f56 <_printf_i+0x15a>
 800701a:	3501      	adds	r5, #1
 800701c:	68e3      	ldr	r3, [r4, #12]
 800701e:	9903      	ldr	r1, [sp, #12]
 8007020:	1a5b      	subs	r3, r3, r1
 8007022:	42ab      	cmp	r3, r5
 8007024:	dcf2      	bgt.n	800700c <_printf_i+0x210>
 8007026:	e7eb      	b.n	8007000 <_printf_i+0x204>
 8007028:	2500      	movs	r5, #0
 800702a:	f104 0619 	add.w	r6, r4, #25
 800702e:	e7f5      	b.n	800701c <_printf_i+0x220>
 8007030:	08007565 	.word	0x08007565
 8007034:	08007576 	.word	0x08007576

08007038 <__sflush_r>:
 8007038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	0716      	lsls	r6, r2, #28
 8007042:	4605      	mov	r5, r0
 8007044:	460c      	mov	r4, r1
 8007046:	d454      	bmi.n	80070f2 <__sflush_r+0xba>
 8007048:	684b      	ldr	r3, [r1, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	dc02      	bgt.n	8007054 <__sflush_r+0x1c>
 800704e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	dd48      	ble.n	80070e6 <__sflush_r+0xae>
 8007054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007056:	2e00      	cmp	r6, #0
 8007058:	d045      	beq.n	80070e6 <__sflush_r+0xae>
 800705a:	2300      	movs	r3, #0
 800705c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007060:	682f      	ldr	r7, [r5, #0]
 8007062:	6a21      	ldr	r1, [r4, #32]
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	d030      	beq.n	80070ca <__sflush_r+0x92>
 8007068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	0759      	lsls	r1, r3, #29
 800706e:	d505      	bpl.n	800707c <__sflush_r+0x44>
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007076:	b10b      	cbz	r3, 800707c <__sflush_r+0x44>
 8007078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	2300      	movs	r3, #0
 800707e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007080:	6a21      	ldr	r1, [r4, #32]
 8007082:	4628      	mov	r0, r5
 8007084:	47b0      	blx	r6
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	d106      	bne.n	800709a <__sflush_r+0x62>
 800708c:	6829      	ldr	r1, [r5, #0]
 800708e:	291d      	cmp	r1, #29
 8007090:	d82b      	bhi.n	80070ea <__sflush_r+0xb2>
 8007092:	4a2a      	ldr	r2, [pc, #168]	@ (800713c <__sflush_r+0x104>)
 8007094:	40ca      	lsrs	r2, r1
 8007096:	07d6      	lsls	r6, r2, #31
 8007098:	d527      	bpl.n	80070ea <__sflush_r+0xb2>
 800709a:	2200      	movs	r2, #0
 800709c:	6062      	str	r2, [r4, #4]
 800709e:	04d9      	lsls	r1, r3, #19
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	6022      	str	r2, [r4, #0]
 80070a4:	d504      	bpl.n	80070b0 <__sflush_r+0x78>
 80070a6:	1c42      	adds	r2, r0, #1
 80070a8:	d101      	bne.n	80070ae <__sflush_r+0x76>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	b903      	cbnz	r3, 80070b0 <__sflush_r+0x78>
 80070ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80070b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070b2:	602f      	str	r7, [r5, #0]
 80070b4:	b1b9      	cbz	r1, 80070e6 <__sflush_r+0xae>
 80070b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d002      	beq.n	80070c4 <__sflush_r+0x8c>
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fbf8 	bl	80068b4 <_free_r>
 80070c4:	2300      	movs	r3, #0
 80070c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80070c8:	e00d      	b.n	80070e6 <__sflush_r+0xae>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	4602      	mov	r2, r0
 80070d2:	1c50      	adds	r0, r2, #1
 80070d4:	d1c9      	bne.n	800706a <__sflush_r+0x32>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0c6      	beq.n	800706a <__sflush_r+0x32>
 80070dc:	2b1d      	cmp	r3, #29
 80070de:	d001      	beq.n	80070e4 <__sflush_r+0xac>
 80070e0:	2b16      	cmp	r3, #22
 80070e2:	d11e      	bne.n	8007122 <__sflush_r+0xea>
 80070e4:	602f      	str	r7, [r5, #0]
 80070e6:	2000      	movs	r0, #0
 80070e8:	e022      	b.n	8007130 <__sflush_r+0xf8>
 80070ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ee:	b21b      	sxth	r3, r3
 80070f0:	e01b      	b.n	800712a <__sflush_r+0xf2>
 80070f2:	690f      	ldr	r7, [r1, #16]
 80070f4:	2f00      	cmp	r7, #0
 80070f6:	d0f6      	beq.n	80070e6 <__sflush_r+0xae>
 80070f8:	0793      	lsls	r3, r2, #30
 80070fa:	680e      	ldr	r6, [r1, #0]
 80070fc:	bf08      	it	eq
 80070fe:	694b      	ldreq	r3, [r1, #20]
 8007100:	600f      	str	r7, [r1, #0]
 8007102:	bf18      	it	ne
 8007104:	2300      	movne	r3, #0
 8007106:	eba6 0807 	sub.w	r8, r6, r7
 800710a:	608b      	str	r3, [r1, #8]
 800710c:	f1b8 0f00 	cmp.w	r8, #0
 8007110:	dde9      	ble.n	80070e6 <__sflush_r+0xae>
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007116:	4643      	mov	r3, r8
 8007118:	463a      	mov	r2, r7
 800711a:	4628      	mov	r0, r5
 800711c:	47b0      	blx	r6
 800711e:	2800      	cmp	r0, #0
 8007120:	dc08      	bgt.n	8007134 <__sflush_r+0xfc>
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007134:	4407      	add	r7, r0
 8007136:	eba8 0800 	sub.w	r8, r8, r0
 800713a:	e7e7      	b.n	800710c <__sflush_r+0xd4>
 800713c:	20400001 	.word	0x20400001

08007140 <_fflush_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	690b      	ldr	r3, [r1, #16]
 8007144:	4605      	mov	r5, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b913      	cbnz	r3, 8007150 <_fflush_r+0x10>
 800714a:	2500      	movs	r5, #0
 800714c:	4628      	mov	r0, r5
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	b118      	cbz	r0, 800715a <_fflush_r+0x1a>
 8007152:	6a03      	ldr	r3, [r0, #32]
 8007154:	b90b      	cbnz	r3, 800715a <_fflush_r+0x1a>
 8007156:	f7ff fa37 	bl	80065c8 <__sinit>
 800715a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f3      	beq.n	800714a <_fflush_r+0xa>
 8007162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007164:	07d0      	lsls	r0, r2, #31
 8007166:	d404      	bmi.n	8007172 <_fflush_r+0x32>
 8007168:	0599      	lsls	r1, r3, #22
 800716a:	d402      	bmi.n	8007172 <_fflush_r+0x32>
 800716c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716e:	f7ff fb7e 	bl	800686e <__retarget_lock_acquire_recursive>
 8007172:	4628      	mov	r0, r5
 8007174:	4621      	mov	r1, r4
 8007176:	f7ff ff5f 	bl	8007038 <__sflush_r>
 800717a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800717c:	07da      	lsls	r2, r3, #31
 800717e:	4605      	mov	r5, r0
 8007180:	d4e4      	bmi.n	800714c <_fflush_r+0xc>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	059b      	lsls	r3, r3, #22
 8007186:	d4e1      	bmi.n	800714c <_fflush_r+0xc>
 8007188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800718a:	f7ff fb71 	bl	8006870 <__retarget_lock_release_recursive>
 800718e:	e7dd      	b.n	800714c <_fflush_r+0xc>

08007190 <__malloc_lock>:
 8007190:	4801      	ldr	r0, [pc, #4]	@ (8007198 <__malloc_lock+0x8>)
 8007192:	f7ff bb6c 	b.w	800686e <__retarget_lock_acquire_recursive>
 8007196:	bf00      	nop
 8007198:	20004bbc 	.word	0x20004bbc

0800719c <__malloc_unlock>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__malloc_unlock+0x8>)
 800719e:	f7ff bb67 	b.w	8006870 <__retarget_lock_release_recursive>
 80071a2:	bf00      	nop
 80071a4:	20004bbc 	.word	0x20004bbc

080071a8 <__sread>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	460c      	mov	r4, r1
 80071ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b0:	f000 f918 	bl	80073e4 <_read_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	bfab      	itete	ge
 80071b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ba:	89a3      	ldrhlt	r3, [r4, #12]
 80071bc:	181b      	addge	r3, r3, r0
 80071be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071c2:	bfac      	ite	ge
 80071c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071c6:	81a3      	strhlt	r3, [r4, #12]
 80071c8:	bd10      	pop	{r4, pc}

080071ca <__swrite>:
 80071ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ce:	461f      	mov	r7, r3
 80071d0:	898b      	ldrh	r3, [r1, #12]
 80071d2:	05db      	lsls	r3, r3, #23
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4616      	mov	r6, r2
 80071da:	d505      	bpl.n	80071e8 <__swrite+0x1e>
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2302      	movs	r3, #2
 80071e2:	2200      	movs	r2, #0
 80071e4:	f000 f8ec 	bl	80073c0 <_lseek_r>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	4632      	mov	r2, r6
 80071f6:	463b      	mov	r3, r7
 80071f8:	4628      	mov	r0, r5
 80071fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	f000 b913 	b.w	8007428 <_write_r>

08007202 <__sseek>:
 8007202:	b510      	push	{r4, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720a:	f000 f8d9 	bl	80073c0 <_lseek_r>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	bf15      	itete	ne
 8007214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800721a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800721e:	81a3      	strheq	r3, [r4, #12]
 8007220:	bf18      	it	ne
 8007222:	81a3      	strhne	r3, [r4, #12]
 8007224:	bd10      	pop	{r4, pc}

08007226 <__sclose>:
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 b90f 	b.w	800744c <_close_r>

0800722e <__swbuf_r>:
 800722e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007230:	460e      	mov	r6, r1
 8007232:	4614      	mov	r4, r2
 8007234:	4605      	mov	r5, r0
 8007236:	b118      	cbz	r0, 8007240 <__swbuf_r+0x12>
 8007238:	6a03      	ldr	r3, [r0, #32]
 800723a:	b90b      	cbnz	r3, 8007240 <__swbuf_r+0x12>
 800723c:	f7ff f9c4 	bl	80065c8 <__sinit>
 8007240:	69a3      	ldr	r3, [r4, #24]
 8007242:	60a3      	str	r3, [r4, #8]
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	071a      	lsls	r2, r3, #28
 8007248:	d501      	bpl.n	800724e <__swbuf_r+0x20>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	b943      	cbnz	r3, 8007260 <__swbuf_r+0x32>
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f82b 	bl	80072ac <__swsetup_r>
 8007256:	b118      	cbz	r0, 8007260 <__swbuf_r+0x32>
 8007258:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800725c:	4638      	mov	r0, r7
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6922      	ldr	r2, [r4, #16]
 8007264:	1a98      	subs	r0, r3, r2
 8007266:	6963      	ldr	r3, [r4, #20]
 8007268:	b2f6      	uxtb	r6, r6
 800726a:	4283      	cmp	r3, r0
 800726c:	4637      	mov	r7, r6
 800726e:	dc05      	bgt.n	800727c <__swbuf_r+0x4e>
 8007270:	4621      	mov	r1, r4
 8007272:	4628      	mov	r0, r5
 8007274:	f7ff ff64 	bl	8007140 <_fflush_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	d1ed      	bne.n	8007258 <__swbuf_r+0x2a>
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	3b01      	subs	r3, #1
 8007280:	60a3      	str	r3, [r4, #8]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	6022      	str	r2, [r4, #0]
 8007288:	701e      	strb	r6, [r3, #0]
 800728a:	6962      	ldr	r2, [r4, #20]
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	429a      	cmp	r2, r3
 8007290:	d004      	beq.n	800729c <__swbuf_r+0x6e>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	07db      	lsls	r3, r3, #31
 8007296:	d5e1      	bpl.n	800725c <__swbuf_r+0x2e>
 8007298:	2e0a      	cmp	r6, #10
 800729a:	d1df      	bne.n	800725c <__swbuf_r+0x2e>
 800729c:	4621      	mov	r1, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	f7ff ff4e 	bl	8007140 <_fflush_r>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0d9      	beq.n	800725c <__swbuf_r+0x2e>
 80072a8:	e7d6      	b.n	8007258 <__swbuf_r+0x2a>
	...

080072ac <__swsetup_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4b29      	ldr	r3, [pc, #164]	@ (8007354 <__swsetup_r+0xa8>)
 80072b0:	4605      	mov	r5, r0
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	460c      	mov	r4, r1
 80072b6:	b118      	cbz	r0, 80072c0 <__swsetup_r+0x14>
 80072b8:	6a03      	ldr	r3, [r0, #32]
 80072ba:	b90b      	cbnz	r3, 80072c0 <__swsetup_r+0x14>
 80072bc:	f7ff f984 	bl	80065c8 <__sinit>
 80072c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c4:	0719      	lsls	r1, r3, #28
 80072c6:	d422      	bmi.n	800730e <__swsetup_r+0x62>
 80072c8:	06da      	lsls	r2, r3, #27
 80072ca:	d407      	bmi.n	80072dc <__swsetup_r+0x30>
 80072cc:	2209      	movs	r2, #9
 80072ce:	602a      	str	r2, [r5, #0]
 80072d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072da:	e033      	b.n	8007344 <__swsetup_r+0x98>
 80072dc:	0758      	lsls	r0, r3, #29
 80072de:	d512      	bpl.n	8007306 <__swsetup_r+0x5a>
 80072e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072e2:	b141      	cbz	r1, 80072f6 <__swsetup_r+0x4a>
 80072e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072e8:	4299      	cmp	r1, r3
 80072ea:	d002      	beq.n	80072f2 <__swsetup_r+0x46>
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7ff fae1 	bl	80068b4 <_free_r>
 80072f2:	2300      	movs	r3, #0
 80072f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	2300      	movs	r3, #0
 8007300:	6063      	str	r3, [r4, #4]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f043 0308 	orr.w	r3, r3, #8
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	b94b      	cbnz	r3, 8007326 <__swsetup_r+0x7a>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800731c:	d003      	beq.n	8007326 <__swsetup_r+0x7a>
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f7ff f9ad 	bl	8006680 <__smakebuf_r>
 8007326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732a:	f013 0201 	ands.w	r2, r3, #1
 800732e:	d00a      	beq.n	8007346 <__swsetup_r+0x9a>
 8007330:	2200      	movs	r2, #0
 8007332:	60a2      	str	r2, [r4, #8]
 8007334:	6962      	ldr	r2, [r4, #20]
 8007336:	4252      	negs	r2, r2
 8007338:	61a2      	str	r2, [r4, #24]
 800733a:	6922      	ldr	r2, [r4, #16]
 800733c:	b942      	cbnz	r2, 8007350 <__swsetup_r+0xa4>
 800733e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007342:	d1c5      	bne.n	80072d0 <__swsetup_r+0x24>
 8007344:	bd38      	pop	{r3, r4, r5, pc}
 8007346:	0799      	lsls	r1, r3, #30
 8007348:	bf58      	it	pl
 800734a:	6962      	ldrpl	r2, [r4, #20]
 800734c:	60a2      	str	r2, [r4, #8]
 800734e:	e7f4      	b.n	800733a <__swsetup_r+0x8e>
 8007350:	2000      	movs	r0, #0
 8007352:	e7f7      	b.n	8007344 <__swsetup_r+0x98>
 8007354:	2000001c 	.word	0x2000001c

08007358 <_putc_r>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	460d      	mov	r5, r1
 800735c:	4614      	mov	r4, r2
 800735e:	4606      	mov	r6, r0
 8007360:	b118      	cbz	r0, 800736a <_putc_r+0x12>
 8007362:	6a03      	ldr	r3, [r0, #32]
 8007364:	b90b      	cbnz	r3, 800736a <_putc_r+0x12>
 8007366:	f7ff f92f 	bl	80065c8 <__sinit>
 800736a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800736c:	07d8      	lsls	r0, r3, #31
 800736e:	d405      	bmi.n	800737c <_putc_r+0x24>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	0599      	lsls	r1, r3, #22
 8007374:	d402      	bmi.n	800737c <_putc_r+0x24>
 8007376:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007378:	f7ff fa79 	bl	800686e <__retarget_lock_acquire_recursive>
 800737c:	68a3      	ldr	r3, [r4, #8]
 800737e:	3b01      	subs	r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	da05      	bge.n	8007392 <_putc_r+0x3a>
 8007386:	69a2      	ldr	r2, [r4, #24]
 8007388:	4293      	cmp	r3, r2
 800738a:	db12      	blt.n	80073b2 <_putc_r+0x5a>
 800738c:	b2eb      	uxtb	r3, r5
 800738e:	2b0a      	cmp	r3, #10
 8007390:	d00f      	beq.n	80073b2 <_putc_r+0x5a>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	6022      	str	r2, [r4, #0]
 8007398:	701d      	strb	r5, [r3, #0]
 800739a:	b2ed      	uxtb	r5, r5
 800739c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800739e:	07da      	lsls	r2, r3, #31
 80073a0:	d405      	bmi.n	80073ae <_putc_r+0x56>
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	d402      	bmi.n	80073ae <_putc_r+0x56>
 80073a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073aa:	f7ff fa61 	bl	8006870 <__retarget_lock_release_recursive>
 80073ae:	4628      	mov	r0, r5
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
 80073b2:	4629      	mov	r1, r5
 80073b4:	4622      	mov	r2, r4
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ff39 	bl	800722e <__swbuf_r>
 80073bc:	4605      	mov	r5, r0
 80073be:	e7ed      	b.n	800739c <_putc_r+0x44>

080073c0 <_lseek_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	@ (80073e0 <_lseek_r+0x20>)
 80073c4:	4604      	mov	r4, r0
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7f9 fc6e 	bl	8000cb0 <_lseek>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_lseek_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_lseek_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20004bc0 	.word	0x20004bc0

080073e4 <_read_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d07      	ldr	r5, [pc, #28]	@ (8007404 <_read_r+0x20>)
 80073e8:	4604      	mov	r4, r0
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	602a      	str	r2, [r5, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f7f9 fc18 	bl	8000c28 <_read>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_read_r+0x1e>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_read_r+0x1e>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	20004bc0 	.word	0x20004bc0

08007408 <_sbrk_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d06      	ldr	r5, [pc, #24]	@ (8007424 <_sbrk_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	f7f9 fc5a 	bl	8000ccc <_sbrk>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_sbrk_r+0x1a>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_sbrk_r+0x1a>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20004bc0 	.word	0x20004bc0

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	@ (8007448 <_write_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7f9 fade 	bl	80009f8 <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20004bc0 	.word	0x20004bc0

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d06      	ldr	r5, [pc, #24]	@ (8007468 <_close_r+0x1c>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7f9 fc03 	bl	8000c62 <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	20004bc0 	.word	0x20004bc0

0800746c <_init>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr

08007478 <_fini>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr
